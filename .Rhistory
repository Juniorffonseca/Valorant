View(ds_adversarios)
loud_lev = 0
if(ds_adversarios$Adversario == 'Leviatán'){
loud_w_lev = loud_w_lev + 1
}
?for
??for
??for
ds_adversarios$Adversario == 'Leviatán'
a <- ds_adversarios$Adversario == 'Leviatán'
a
a <- ds_adversarios$Adversario == 'Leviatán'== T
a <- ds_adversarios$Adversario == 'Leviatán' = T
ds_adversarios$Adversario == 'Leviatán' == T
ds_adversarios$Adversario == 'Leviatán' = T
View(ds_adversarios)
?count
count(ds_adversarios$Adversario == 'Leviatán')
count(ds_adversarios$Adversario = 'Leviatán')
sum(ds_adversarios$Adversario = 'Leviatán')
sum(ds_adversarios$Adversario == 'Leviatán')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Lose')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
loud_lev <- sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
rm(a)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R)
medialev <- mean(lev_df$R)
mediaxset <- mean(xset_df$R)
mediafpx <- mean(fpx_df$R)
mediadrx <- mean(drx_df$R)
mediaop <- mean(op_df$R)
mediafntc <- mean(fntc_df$R)
mediatl <- mean(tl_df$R)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
loud_lev = 0
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) + 1/mean(loud_df$idc)
medialev <- mean(lev_df$R) + 1/mean(lev_df$idc)
mediaxset <- mean(xset_df$R) + 1/mean(xset_df$idc)
mediafpx <- mean(fpx_df$R) + 1/mean(fpx_df$idc)
mediadrx <- mean(drx_df$R) + 1/mean(drx_df$idc)
mediaop <- mean(op_df$R) + 1/mean(op_df$idc)
mediafntc <- mean(fntc_df$R) + 1/mean(fntc_df$idc)
mediatl <- mean(tl_df$R) + 1/mean(tl_df$idc)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
loud_lev = 0
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 > 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
loud_lev = 0
mediatl <- mean(tl_df$R)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R)
medialev <- mean(lev_df$R)
mediaxset <- mean(xset_df$R)
mediafpx <- mean(fpx_df$R)
mediadrx <- mean(drx_df$R)
mediaop <- mean(op_df$R)
mediafntc <- mean(fntc_df$R)
mediatl <- mean(tl_df$R)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 > 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(lubridate)
# Urls ----------------------------------------------------------------------------------------------------
url_xset <- "https://www.vlr.gg/team/stats/533/xset/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_adversarios_xset <- read_html(url_xset) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_adversarios_xset)[9] <- 'RW ATK'
names(ds_adversarios_xset)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_adversarios_xset <- select(ds_adversarios_xset, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
ds_adversarios_xset[-1] <- lapply(ds_adversarios_xset[-1], str_replace_all, "\t", ' ')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_adversarios_xset <- subset(ds_adversarios_xset, nchar(gsub("[^a-z]", "", ds_adversarios_xset$`Map (#)`)) < 1)
ds_adversarios_xset[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_xset$`WIN%`, '\n', 2)
ds_adversarios_xset[c('Adversario', 'Resultado')] <- str_split_fixed(
ds_adversarios_xset$Resultado, '\n\n\n', 2)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_adversarios_xset[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_xset$`WIN%`, ' ', 2)
# Selecionando apenas Data, Resultado e Adversario para o nosso dataframe ---------------------------------
ds_adversarios_xset <- select(ds_adversarios_xset, 'Data', 'Resultado', 'Adversario')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_adversarios_xset$Data <- as_date(ds_adversarios_xset$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_adversarios_xset$Resultado <- gsub("[^0-9/ .-]", "", ds_adversarios_xset$Resultado)# Deixando apenas números e "/"
#
ds_adversarios_xset$Resultado <- substr(ds_adversarios_xset$Resultado,
gregexpr("/", ds_adversarios_xset$Resultado)[[1]][1] - 3,
gregexpr("/", ds_adversarios_xset$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_adversarios_xset <- separate(ds_adversarios_xset, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_adversarios_xset$RL <- sub(" .*", "", ds_adversarios_xset$RL) # Tirando todos os caracteres que estavam à direita
ds_adversarios_xset$RW <- sub("*. ", "", ds_adversarios_xset$RW) # Tirando todos os caracteres que estavam à esquerda
ds_adversarios_xset$RW <- sub(" ", "", ds_adversarios_xset$RW) # Tirando todos os espaços
ds_adversarios_xset$RL <- sub(" ", "", ds_adversarios_xset$RL) # Tirando todos os espaços
ds_adversarios_xset$Resultados <- as.numeric(ds_adversarios_xset$RW) > as.numeric(ds_adversarios_xset$RL) # Criando uma coluna de resultados
ds_adversarios_xset$Resultados <- replace(ds_adversarios_xset$Resultados, ds_adversarios_xset$Resultados == TRUE, 'Win') %>%
replace(ds_adversarios_xset$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
# Limpando a coluna 'Adversario' --------------------------------------------------------------------------
ds_adversarios_xset[-1] <- lapply(ds_adversarios_xset[-1], str_replace_all, "\\s", ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ')
ds_adversarios_xset[-1] <- lapply(ds_adversarios_xset[-1], str_replace_all, "  ", '')
View(ds_adversarios_xset)
View(ds_adversarios_xset)
# Exportando o arquivo
write.csv(ds_adversarios_xset, file = "C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_xset.csv")
# Urls ----------------------------------------------------------------------------------------------------
url_lev <- "https://www.vlr.gg/team/stats/2359/leviat-n/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_adversarios_lev <- read_html(url_lev) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_adversarios_lev)[9] <- 'RW ATK'
names(ds_adversarios_lev)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_adversarios_lev <- select(ds_adversarios_lev, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
ds_adversarios_lev[-1] <- lapply(ds_adversarios_lev[-1], str_replace_all, "\t", ' ')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_adversarios_lev <- subset(ds_adversarios_lev, nchar(gsub("[^a-z]", "", ds_adversarios_lev$`Map (#)`)) < 1)
ds_adversarios_lev[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_lev$`WIN%`, '\n', 2)
ds_adversarios_lev[c('Adversario', 'Resultado')] <- str_split_fixed(
ds_adversarios_lev$Resultado, '\n\n\n', 2)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_adversarios_lev[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_lev$`WIN%`, ' ', 2)
# Selecionando apenas Data, Resultado e Adversario para o nosso dataframe ---------------------------------
ds_adversarios_lev <- select(ds_adversarios_lev, 'Data', 'Resultado', 'Adversario')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_adversarios_lev$Data <- as_date(ds_adversarios_lev$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_adversarios_lev$Resultado <- gsub("[^0-9/ .-]", "", ds_adversarios_lev$Resultado)# Deixando apenas números e "/"
#
ds_adversarios_lev$Resultado <- substr(ds_adversarios_lev$Resultado,
gregexpr("/", ds_adversarios_lev$Resultado)[[1]][1] - 3,
gregexpr("/", ds_adversarios_lev$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_adversarios_lev <- separate(ds_adversarios_lev, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_adversarios_lev$RL <- sub(" .*", "", ds_adversarios_lev$RL) # Tirando todos os caracteres que estavam à direita
ds_adversarios_lev$RW <- sub("*. ", "", ds_adversarios_lev$RW) # Tirando todos os caracteres que estavam à esquerda
ds_adversarios_lev$RW <- sub(" ", "", ds_adversarios_lev$RW) # Tirando todos os espaços
ds_adversarios_lev$RL <- sub(" ", "", ds_adversarios_lev$RL) # Tirando todos os espaços
ds_adversarios_lev$Resultados <- as.numeric(ds_adversarios_lev$RW) > as.numeric(ds_adversarios_lev$RL) # Criando uma coluna de resultados
ds_adversarios_lev$Resultados <- replace(ds_adversarios_lev$Resultados, ds_adversarios_lev$Resultados == TRUE, 'Win') %>%
replace(ds_adversarios_lev$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
# Limpando a coluna 'Adversario' --------------------------------------------------------------------------
ds_adversarios_lev[-1] <- lapply(ds_adversarios_lev[-1], str_replace_all, "\\s", ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ')
ds_adversarios_lev[-1] <- lapply(ds_adversarios_lev[-1], str_replace_all, "  ", '')
# Exportando o arquivo
write.csv(ds_adversarios_lev, file = "C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_lev.csv")
ds_adversarios_fpx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_fpx.csv",
sep = ',') %>% select(-X)
View(ds_adversarios_fpx)
ds_adversarios_drx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_drx.csv",
sep = ',') %>% select(-X)
ds_adversarios_loud <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_loud.csv",
sep = ',') %>% select(-X)
ds_adversarios_lev <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_xset.csv",
sep = ',') %>% select(-X)
View(ds_adversarios_drx)
#Drx
drx_fpx <- sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Lose')
