# Porcentagem de vitória
jogo1 <- round(mediac9w / (mediac9w + mediakru), 2)
jogo2 <- round(mediag2 / (mediag2 + mediax10), 3)
jogo3 <- round(mediagldx / (mediagldx + mediasr), 2)
jogo4 <- round(mediaflgc / (mediaflgc + mediatl), 2)
jogo5 <- round(mediakru / (mediakru + mediax10), 2)
jogo6 <- round(mediagldx / (mediagldx + mediaflgc), 2)
jogo7 <- round(mediac9w / (mediac9w + mediag2), 2)
jogo8 <- round(mediasr / (mediasr + mediatl), 2)
jogo9 <- round(mediasr / (mediasr + mediax10), 2)
jogo10 <- round(mediac9w / (mediac9w + mediagldx), 2)
jogo11 <- round(mediag2 / (mediag2 + mediatl), 2)
jogo12 <- round(mediasr / (mediasr + mediac9w), 2)
jogo13 <- round(mediag2 / (mediag2 + mediasr), 2)
jogo14 <- round(mediatl / (mediatl + mediasr), 2)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 > 0.50){
acertos = acertos + 1
}
if(jogo3 < 0.50){
acertos = acertos + 1
}
if(jogo4 < 0.50){
acertos = acertos + 1
}
if(jogo5 < 0.50){
acertos = acertos + 1
}
if(jogo6 > 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 < 0.50){
acertos = acertos + 1
}
if(jogo9 > 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 > 0.50){
acertos = acertos + 1
}
if(jogo12 > 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 < 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('dados_gerais.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- dados_gerais[,-1]
dados_gerais <- dados_gerais[,-2]
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dados_gerais[,-1]
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
resultado <- resultado[-41,]
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
idc_t1 <- ineq(loud_df$KAST, type = 'Gini')
idc_t2 <- ineq(op_df$KAST, type = 'Gini')
idc_t3 <- ineq(drx_df$KAST, type = 'Gini')
idc_t4 <- ineq(xset_df$KAST, type = 'Gini')
idc_t5 <- ineq(tl_df$KAST, type = 'Gini')
idc_t6 <- ineq(lev_df$KAST, type = 'Gini')
idc_t7 <- ineq(fpx_df$KAST, type = 'Gini')
idc_t8 <- ineq(fntc_df$KAST, type = 'Gini')
# Colocando o indice de Gini em cada jogador para seu respectivo time
loud_df$idc <- idc_t1
op_df$idc <- idc_t2
drx_df$idc <- idc_t3
xset_df$idc <- idc_t4
tl_df$idc <- idc_t5
lev_df$idc <- idc_t6
fpx_df$idc <- idc_t7
fntc_df$idc <- idc_t8
# Removendo as variaveis idc_tn e times
rm(idc_t1, idc_t2, idc_t3, idc_t4, idc_t5, idc_t6, idc_t7, idc_t8)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-7:-14]
fntc_df <- fntc_df[,-7:-14]
xset_df <- xset_df[,-7:-14]
drx_df <- drx_df[,-7:-14]
lev_df <- lev_df[,-7:-14]
op_df <- op_df[,-7:-14]
tl_df <- tl_df[,-7:-14]
fpx_df <- fpx_df[,-7:-14]
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) + (mean(loud_df$Elo))
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) + 1/mean(loud_df$idc)
medialev <- mean(lev_df$R) + 1/mean(lev_df$idc)
mediaxset <- mean(xset_df$R) + 1/mean(xset_df$idc)
mediafpx <- mean(fpx_df$R) + 1/mean(fpx_df$idc)
mediadrx <- mean(drx_df$R) + 1/mean(drx_df$idc)
mediaop <- mean(op_df$R) + 1/mean(op_df$idc)
mediafntc <- mean(fntc_df$R) + 1/mean(fntc_df$idc)
mediatl <- mean(tl_df$R) + 1/mean(tl_df$idc)
# Porcentagem de vitória
jogo1 <- round(medialoud / (medialoud + medialev), 3)
jogo2 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo3 <- round(mediadrx / (mediadrx + mediaop), 3)
jogo4 <- round(mediafntc / (mediafntc + mediatl), 3)
jogo5 <- round(medialev / (medialev + mediafpx), 3)
jogo6 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo7 <- round(medialoud / (medialoud + mediaxset), 3)
jogo8 <- round(mediaop / (mediaop + mediatl), 6)
jogo9 <- round(mediaop / (mediaop + mediafpx), 3)
jogo10 <- round(medialoud / (medialoud + mediadrx), 3)
jogo11 <- round(mediaxset / (mediaxset + mediatl), 3)
jogo12 <- round(mediaop / (mediaop + medialoud), 3)
jogo13 <- round(mediaxset / (mediaxset + mediaop), 3)
jogo14 <- round(mediatl / (mediatl + mediaop), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
# Criando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 ----------------------
# Calculando índices dos times
mediac9w <- mean(c9w_df$R) + 1/mean(c9w_df$idc)
mean(loud_df$R)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) * 1/mean(loud_df$idc)
medialev <- mean(lev_df$R) * 1/mean(lev_df$idc)
mediaxset <- mean(xset_df$R) * 1/mean(xset_df$idc)
mediafpx <- mean(fpx_df$R) * 1/mean(fpx_df$idc)
mediadrx <- mean(drx_df$R) * 1/mean(drx_df$idc)
mediaop <- mean(op_df$R) * 1/mean(op_df$idc)
mediafntc <- mean(fntc_df$R) * 1/mean(fntc_df$idc)
mediatl <- mean(tl_df$R) * 1/mean(tl_df$idc)
# Porcentagem de vitória
jogo1 <- round(medialoud / (medialoud + medialev), 3)
jogo2 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo3 <- round(mediadrx / (mediadrx + mediaop), 3)
jogo4 <- round(mediafntc / (mediafntc + mediatl), 3)
jogo5 <- round(medialev / (medialev + mediafpx), 3)
jogo6 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo7 <- round(medialoud / (medialoud + mediaxset), 3)
jogo8 <- round(mediaop / (mediaop + mediatl), 6)
jogo9 <- round(mediaop / (mediaop + mediafpx), 3)
jogo10 <- round(medialoud / (medialoud + mediadrx), 3)
jogo11 <- round(mediaxset / (mediaxset + mediatl), 3)
jogo12 <- round(mediaop / (mediaop + medialoud), 3)
jogo13 <- round(mediaxset / (mediaxset + mediaop), 3)
jogo14 <- round(mediatl / (mediatl + mediaop), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) * 2/mean(loud_df$idc)
medialev <- mean(lev_df$R) * 2/mean(lev_df$idc)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) * 10/mean(loud_df$idc)
medialev <- mean(lev_df$R) * 10/mean(lev_df$idc)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) * 1/mean(loud_df$idc)
medialev <- mean(lev_df$R) * 1/mean(lev_df$idc)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
## Urls dos dois times ------------------------------------------------------------------------------------
url_time1 <- "https://www.vlr.gg/team/stats/6961/loud/"
url_time2 <- "https://www.vlr.gg/team/stats/8127/optic-gaming/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
# Time 1
ds_time1 <- read_html(url_time1) %>%
html_node("table") %>%
html_table
# Time 2
ds_time2 <- read_html(url_time2) %>%
html_node("table") %>%
html_table
# Renomeando as colunas 9 e 10 ----------------------------------------------------------------------------
# Time 1
names(ds_time1)[9] <- 'RW ATK'
names(ds_time1)[10] <- 'RL ATK'
# Time 2
names(ds_time2)[9] <- 'RW ATK'
names(ds_time2)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
# Time 1
ds_time1 <- select(ds_time1, -Expand) %>%
select( -'Agent Compositions')
# Time 2
ds_time2 <- select(ds_time2, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
# Time 1
ds_time1[-1] <- lapply(ds_time1[-1], str_replace_all, "\n", ' ') %>%
lapply(str_replace_all, '\t', ' ') %>%
lapply(str_replace_all, '  ', '')
# Time 2
ds_time2[-1] <- lapply(ds_time2[-1], str_replace_all, "\n", ' ') %>%
lapply(str_replace_all, ' ', '')
# Deixando apenas as linhas que tenha 1 ou mais caracteres na coluna Map ----------------------------------
ds_time1 <- subset(ds_time1, nchar(gsub("[^a-z]", "", ds_time1$`Map (#)`)) > 0)
ds_time2 <- subset(ds_time2, nchar(gsub("[^a-z]", "", ds_time2$`Map (#)`)) > 0)
# Comparando os dois times em todos os mapas e retornando um dataframe com esse feedback ------------------
ds_times <- ds_time1
ds_times$vantagem <- ifelse(ds_time1$`WIN%` > ds_time2$`WIN%`, 'Time1',
ifelse(ds_time1$`WIN%` < ds_time2$`WIN%`, 'Time2', 'Empate'))
ds_times <- select(ds_times, `Map (#)`, `vantagem`)
View(ds_time1)
View(ds_times)
rm(ds_time1, ds_time2, ds_time3)
rm(ds_times)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(lubridate)
# Urls ----------------------------------------------------------------------------------------------------
url <- "https://www.vlr.gg/team/stats/6961/loud/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_adversarios <- read_html(url) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_adversarios)[9] <- 'RW ATK'
names(ds_adversarios)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_adversarios <- select(ds_adversarios, -Expand) %>%
select( -'Agent Compositions')
ds_adversarios[-1] <- lapply(ds_adversarios[-1], str_replace_all, "\t", ' ')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_adversarios <- subset(ds_adversarios, nchar(gsub("[^a-z]", "", ds_adversarios$`Map (#)`)) < 1)
ds_adversarios[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios$`WIN%`, '\n', 2)
ds_adversarios[c('Adversario', 'Resultado')] <- str_split_fixed(
ds_adversarios$Resultado, '\n\n\n', 2)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_adversarios[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios$`WIN%`, ' ', 2)
# Selecionando apenas Data, Resultado e Adversario para o nosso dataframe ---------------------------------
ds_adversarios <- select(ds_adversarios, 'Data', 'Resultado', 'Adversario')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_adversarios$Data <- as_date(ds_adversarios$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_adversarios$Resultado <- gsub("[^0-9/ .-]", "", ds_adversarios$Resultado)# Deixando apenas números e "/"
#
ds_adversarios$Resultado <- substr(ds_adversarios$Resultado,
gregexpr("/", ds_adversarios$Resultado)[[1]][1] - 3,
gregexpr("/", ds_adversarios$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_adversarios <- separate(ds_adversarios, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_adversarios$RL <- sub(" .*", "", ds_adversarios$RL) # Tirando todos os caracteres que estavam à direita
ds_adversarios$RW <- sub("*. ", "", ds_adversarios$RW) # Tirando todos os caracteres que estavam à esquerda
ds_adversarios$RW <- sub(" ", "", ds_adversarios$RW) # Tirando todos os espaços
ds_adversarios$RL <- sub(" ", "", ds_adversarios$RL) # Tirando todos os espaços
ds_adversarios$Resultados <- as.numeric(ds_adversarios$RW) > as.numeric(ds_adversarios$RL) # Criando uma coluna de resultados
ds_adversarios$Resultados <- replace(ds_adversarios$Resultados, ds_adversarios$Resultados == TRUE, 'Win') %>%
replace(ds_adversarios$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
# Limpando a coluna 'Adversario' --------------------------------------------------------------------------
ds_adversarios[-1] <- lapply(ds_adversarios[-1], str_replace_all, "\\s", ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ')
ds_adversarios[-1] <- lapply(ds_adversarios[-1], str_replace_all, "  ", '')
View(ds_adversarios)
# Urls ----------------------------------------------------------------------------------------------------
url <- "https://www.vlr.gg/team/stats/6961/loud/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_time <- read_html(url) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_time)[9] <- 'RW ATK'
names(ds_time)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_time <- select(ds_time, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
ds_time[-1] <- lapply(ds_time[-1], str_replace_all, "\n", ' ') %>%
lapply(str_replace_all, '\t', ' ') %>%
lapply(str_replace_all, '  ', '')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_time <- subset(ds_time, nchar(gsub("[^a-z]", "", ds_time$`Map (#)`)) < 1)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_time[c('Data', 'Resultado')] <- str_split_fixed(
ds_time$`WIN%`, ' ', 2)
# Selecionando apenas Data e Resultado para o nosso dataframe ---------------------------------------------
ds_time <- select(ds_time, 'Data', 'Resultado')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_time$Data <- as_date(ds_time$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_time$Resultado <- gsub("[^0-9/ .-]", "", ds_time$Resultado)# Deixando apenas números e "/"
#
ds_time$Resultado <- substr(ds_time$Resultado,
gregexpr("/", ds_time$Resultado)[[1]][1] - 3,
gregexpr("/", ds_time$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_time <- separate(ds_time, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_time$RL <- sub(" .*", "", ds_time$RL) # Tirando todos os caracteres que estavam à direita
ds_time$RW <- sub("*. ", "", ds_time$RW) # Tirando todos os caracteres que estavam à esquerda
ds_time$RW <- sub(" ", "", ds_time$RW) # Tirando todos os espaços
ds_time$RL <- sub(" ", "", ds_time$RL) # Tirando todos os espaços
ds_time$Resultados <- as.numeric(ds_time$RW) > as.numeric(ds_time$RL) # Criando uma coluna de resultados
ds_time$Resultados <- replace(ds_time$Resultados, ds_time$Resultados == TRUE, 'Win') %>%
replace(ds_time$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
RW <- sum(as.numeric(ds_time$RW)) # rwins = rounds wins (rounds vitoriosos)
RL <- sum(as.numeric(ds_time$RL)) # rls = rounds loses (rounds perdidos)
Resultados <- RW - RL # saldo = rounds wins - rounds loses
rounds <- data.frame(RW, RL, Resultados) # passando para um dataframe
ds_time <- select(ds_time, -Data)
rounds$RW <- as.character(rounds$RW)
rounds$RL <- as.character(rounds$RL)
rounds$Resultados <- as.character(rounds$Resultados)
ds_time <- rbind(ds_time, rounds)
View(ds_time)
View(ds_adversarios)
View(ds_adversarios)
loud_lev = 0
if(ds_adversarios$Adversario == 'Leviatán'){
loud_w_lev = loud_w_lev + 1
}
?for
??for
??for
ds_adversarios$Adversario == 'Leviatán'
a <- ds_adversarios$Adversario == 'Leviatán'
a
a <- ds_adversarios$Adversario == 'Leviatán'== T
a <- ds_adversarios$Adversario == 'Leviatán' = T
ds_adversarios$Adversario == 'Leviatán' == T
ds_adversarios$Adversario == 'Leviatán' = T
View(ds_adversarios)
?count
count(ds_adversarios$Adversario == 'Leviatán')
count(ds_adversarios$Adversario = 'Leviatán')
sum(ds_adversarios$Adversario = 'Leviatán')
sum(ds_adversarios$Adversario == 'Leviatán')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Lose')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
loud_lev <- sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
