test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 42
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(16)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(17)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(18)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(19)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(20)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(20)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(23)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 42
sum(predictVstest$ganhador == predictVstest$nn2) / 35
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(24)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 35
sum(predictVstest$ganhador == predictVstest$nn2) / 15
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(25)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(30)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(33)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 15
sum(predictVstest$ganhador == predictVstest$nn2) / 29
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(33)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 30
View(predictVstest)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(342343)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(3423432)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(3422)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(34232)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 34
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(155)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(156)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 18
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1526)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15262)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
nn3 <- ifelse(Predict$net.result[,2]>Predict$net.result[,1],1,0)
z <- as.data.frame(cbind(nn2, nn3))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, z)
sum(predictVstest$ganhador == predictVstest$nn2) / 28
View(predictVstest)
View(predictVstest)
sum(predictVstest$ganhador == predictVstest$nn2) / 28
