rep = 1,
algorithm = 'rprop+',
stepmax = 100000)
?neuralnet
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 100000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = T,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n$result.matrix
View(training_data)
View(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(332)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
?neuralnet
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
jogos$ganhador <- as.factor(jogos$ganhador)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 100,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = max,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
act.fct = "tanh",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 3,
algorithm = 'slr',
stepmax = 1000)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos da competição CHAMPIONS
#nip
nip = c('xand', 'Jonn', 'v1xen', 'bezn1', 'cauanzin') # Definindo o time 1
nip <- paste0('\\b', nip, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$nip <- ifelse(grepl(paste(nip, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#keyd Gaming
keyd = c('murizzz', 'mwzera', 'rhz', 'RgLMeister', 'heat')
keyd <- paste0('\\b', keyd, '\\b')
dados_gerais$keyd <- ifelse(grepl(paste(keyd, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#furia
furia = c('nzr', 'Quick', 'Khalil', 'Mazin', 'dgzin')
furia <- paste0('\\b', furia, '\\b')
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = F), 1, 0)
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TBK
tbk = c('matheuzin', 'kon4n', 'tuyz', 'luk', 'ryotzz')
tbk <- paste0('\\b', tbk, '\\b')
dados_gerais$tbk <- ifelse(grepl(paste(tbk, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#kru
kru = c('NagZ', 'keznit', 'delz1k', 'Klaus', 'Mazino')
kru <- paste0('\\b', kru, '\\b')
dados_gerais$kru <- ifelse(grepl(paste(kru, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Fusion
fus = c('Dcop', 'sickLy', 'xander', 'Torrify', 'Mited', 'Darker')
fus <- paste0('\\b', fus, '\\b')
dados_gerais$fus <- ifelse(grepl(paste(fus, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#E-Xolos LAZER
exl = c('jfoeN', 'BandiCoot', 'DaveeyS', 'Feniz', 'Peloncito')
exl <- paste0('\\b', exl, '\\b')
dados_gerais$exl <- ifelse(grepl(paste(exl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#z9 Team
z9 = c('puleule', 'bnj', 'mizu', 'Tuli', 'deigara')
z9 <- paste0('\\b', z9, '\\b')
dados_gerais$z9 <- ifelse(grepl(paste(z9, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$nip == 1 | dados_gerais$keyd == 1 | dados_gerais$furia == 1
| dados_gerais$tbk == 1 | dados_gerais$kru == 1 | dados_gerais$fus == 1 |
dados_gerais$exl == 1 | dados_gerais$z9 == 1)
View(resultado)
?rownames
?grepl
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T, fixed = T), 1, 0)
View(dados_gerais)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(Hmisc)
library(rlang)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
?grepl
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), fixed = T), 1, 0) #PRECISO ARRUMAR ESSA PARTE
View(dados_gerais)
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0) #PRECISO ARRUMAR ESSA PARTE
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T, fixed = F), 1, 0) #PRECISO ARRUMAR ESSA PARTE
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T, perl = T), 1, 0) #PRECISO ARRUMAR ESSA PARTE
#furia
furia = c('nzr', 'Quick ', 'Khalil', 'Mazin', 'dgzin')
furia <- paste0('\\b', furia, '\\b')
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0) #PRECISO ARRUMAR ESSA PARTE
dados_gerais$furia[1]
dados_gerais$furia[2]
View(dados_gerais)
dados_gerais$furia['Quick.']
dados_gerais$furia['Quick']
dados_gerais$furia[dados_gerais$furia = 1]
dados_gerais$furia[dados_gerais$furia == 1]
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais$furia[dados_gerais$furia == 1]
#furia
furia = c('nzr', 'Quick', 'Khalil', 'Mazin', 'dgzin')
furia <- paste0('\\b', furia, '\\b')
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais$furia[dados_gerais$furia == 1]
?row
dados_gerais$furia[dados_gerais$furia == 1 & row('Quick.1')]
dados_gerais$furia[dados_gerais$furia == 1 & row.name('Quick.1')]
dados_gerais$furia[dados_gerais$furia == 1 & row.names('Quick.1')]
dados_gerais$furia[dados_gerais$furia == 1 & row.names == 'Quick.1']
dados_gerais$furia['Quick.1']
dados_gerais$furia['Quick.1',]
dados_gerais['Quick.1',]
dados_gerais['Quick.1',]$furia
dados_gerais['Quick.1',]$furia <- 0
resultado <- filter(dados_gerais, dados_gerais$nip == 1 | dados_gerais$keyd == 1 | dados_gerais$furia == 1
| dados_gerais$tbk == 1 | dados_gerais$kru == 1 | dados_gerais$fus == 1 |
dados_gerais$exl == 1 | dados_gerais$z9 == 1)
View(resultado)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 41) {
resultado <- resultado[-42,]
}
# Separando os times em dataframes
nip_df <- filter(resultado, resultado$nip == 1)
keyd_df <- filter(resultado, resultado$keyd == 1)
furia_df <- filter(resultado, resultado$furia == 1)
tbk_df <- filter(resultado, resultado$tbk == 1)
kru_df <- filter(resultado, resultado$kru == 1)
fus_df <- filter(resultado, resultado$fus == 1)
exl_df <- filter(resultado, resultado$exl == 1)
z9_df <- filter(resultado, resultado$z9 == 1)
rm(nip, keyd, furia, tbk, kru, fus, exl, z9)
# Tirando colunas de times dos dataframes especificos de cada time
nip_df <- nip_df[,-6:-13]
z9_df <- z9_df[,-6:-13]
tbk_df <- tbk_df[,-6:-13]
furia_df <- furia_df[,-6:-13]
fus_df <- fus_df[,-6:-13]
keyd_df <- keyd_df[,-6:-13]
kru_df <- kru_df[,-6:-13]
exl_df <- exl_df[,-6:-13]
#
furiaR <- mean(furia_df$R)
fusR <- mean(fus_df$R)
keydR <- mean(keyd_df$R)
tbkR <- mean(tbk_df$R)
exlR <- mean(exl_df$R)
kruR <- mean(kru_df$R)
nipR <- mean(nip_df$R)
z9R <- mean(z9_df$R)
time1 <- c(nipR, fusR, kruR, keydR, nipR, tbkR, z9R, kruR, keydR, z9R, furiaR, keydR, furiaR)
time2 <- c(z9R, furiaR, tbkR, exlR, fusR, exlR, furiaR, keydR, nipR, tbkR, kruR, tbkR, tbkR)
ganhador <- c(2, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 1)
jogos <- data.frame(time1, time2, ganhador)
rm(furiaR, fusR, keydR, tbkR, exlR, kruR, nipR, z9R, time1, time2, ganhador)
write.csv2(jogos, 'jogos3.csv')
rm(list = ls())
jogos3 <- read.csv2('jogos3.csv') %>% select(-X)
# União dos dataframes -------------------------------------------------------------------------------------
jogos1 <- read.csv2('jogos.csv') %>% select(-X)
jogos2 <- read.csv2('jogos2.csv') %>% select(-X)
jogos <- rbind(jogos1, jogos2)
jogos$ganhador <- as.factor(jogos$ganhador)
View(jogos)
jogos <- rbind(jogos1, jogos2, jogos3)
jogos$ganhador <- as.factor(jogos$ganhador)
View(jogos)
library(neuralnet)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 3,
algorithm = 'slr',
stepmax = 1000)
?neuralnet
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = T,
lifesign = 'full',
rep = 3,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = T,
lifesign = 'full',
rep = 3,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
h20.init()
library(h2o)
h20.init()
h2o.init()
jogos <- as.h2o(jogos)
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
train <- partidas.split[[1]]
valid <- partidas.split[[2]]
jogos['ganhador'] <- as.factor(jogos['ganhador'])
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
gc()
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
dev.off()
rm(jogos1, jogos2, jogos3)
rm(training_data, test_data)
rm(n)
rm(inp)
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
h2o.init()
jogos.split <- h2o.splitFrame(data = jogos, ratios = 0.80, seed = 333)
train <- partidas.split[[1]]
train <- jogos.split[[1]]
valid <- jogos.split[[2]]
