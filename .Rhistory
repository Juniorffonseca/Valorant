# Removendo as variaveis idc_tn e times
rm(idc_t1, idc_t2, idc_t3, idc_t4, idc_t5, idc_t6, idc_t7, idc_t8)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-6:-13]
fntc_df <- fntc_df[,-6:-13]
xset_df <- xset_df[,-6:-13]
drx_df <- drx_df[,-6:-13]
lev_df <- lev_df[,-6:-13]
op_df <- op_df[,-6:-13]
tl_df <- tl_df[,-6:-13]
fpx_df <- fpx_df[,-6:-13]
# Carregando os dataframes de adversarios ---------------------------------------------------------------------------
ds_adversarios_loud <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_loud.csv",
sep = ',') %>% select(-X)
ds_adversarios_drx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_drx.csv",
sep = ',') %>% select(-X)
ds_adversarios_fpx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_fpx.csv",
sep = ',') %>% select(-X)
ds_adversarios_fntc <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_fntc.csv",
sep = ',') %>% select(-X)
ds_adversarios_tl <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_tl.csv",
sep = ',') %>% select(-X)
ds_adversarios_op <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_op.csv",
sep = ',') %>% select(-X)
ds_adversarios_xset <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_xset.csv",
sep = ',') %>% select(-X)
ds_adversarios_lev <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times_champions/ds_adversarios_lev.csv",
sep = ',') %>% select(-X)
# Ao fim de cada formula abaixo eu desconsiderei (subtraindo) o número de rounds ganhos ou perdidos nesse campeonato
#Loud
loud_lev <- sum(ds_adversarios_loud$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios_loud$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Lose') - 2
loud_op <- sum(ds_adversarios_loud$Adversario == 'OpTic Gaming' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios_loud$Adversario == 'OpTic Gaming' & ds_adversarios_loud$Resultados == 'Lose') - 4
#Drx
drx_fpx <- sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Lose') - 4
drx_loud <- sum(ds_adversarios_drx$Adversario == 'LOUD' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'LOUD' & ds_adversarios_drx$Resultados == 'Lose') + 2
drx_fntc <- sum(ds_adversarios_drx$Adversario == 'FNATIC' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'FNATIC' & ds_adversarios_drx$Resultados == 'Lose') - 1
drx_op <- sum(ds_adversarios_drx$Adversario == 'OpTic Gaming' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'OpTic Gaming' & ds_adversarios_drx$Resultados == 'Lose') + 1
#OpTic
op_tl <- sum(ds_adversarios_op$Adversario == 'Team Liquid' & ds_adversarios_op$Resultados == 'Win') -
sum(ds_adversarios_op$Adversario == 'Team Liquid' & ds_adversarios_op$Resultados == 'Lose') - 1
#Xset
xset_fntc <- sum(ds_adversarios_xset$Adversario == 'FNATIC' & ds_adversarios_xset$Resultados == 'Win') -
sum(ds_adversarios_xset$Adversario == 'FNATIC' & ds_adversarios_xset$Resultados == 'Lose') - 2
xset_fpx <- sum(ds_adversarios_xset$Adversario == 'FunPlus Phoenix' & ds_adversarios_xset$Resultados == 'Win') -
sum(ds_adversarios_xset$Adversario == 'FunPlus Phoenix' & ds_adversarios_xset$Resultados == 'Lose') + 1
xset_op <- sum(ds_adversarios_xset$Adversario == 'OpTic Gaming' & ds_adversarios_xset$Resultados == 'Win') -
sum(ds_adversarios_xset$Adversario == 'OpTic Gaming' & ds_adversarios_xset$Resultados == 'Lose') + 1
#Fpx
fpx_lev <- sum(ds_adversarios_fpx$Adversario == 'Leviatán' & ds_adversarios_fpx$Resultados == 'Win') -
sum(ds_adversarios_fpx$Adversario == 'Leviatán' & ds_adversarios_fpx$Resultados == 'Lose') - 2
#Team Liquid
tl_fntc <- sum(ds_adversarios_tl$Adversario == 'FNATIC' & ds_adversarios_tl$Resultados == 'Win') -
sum(ds_adversarios_tl$Adversario == 'FNATIC' & ds_adversarios_tl$Resultados == 'Lose') + 2
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 ----------------------
jogo1 <- (mean(drx_df$R) + drx_fpx * 0.01) / ((mean(drx_df$R) + drx_fpx * 0.01) +
(mean(fpx_df$R) + (-drx_fpx * 0.01)))
jogo2 <- (mean(lev_df$R) + -loud_lev * 0.01) / ((mean(lev_df$R) + -loud_lev * 0.01) +
mean(loud_df$R) + (loud_lev * 0.01))
jogo3 <- (mean(op_df$R) + op_tl * 0.01) / ((mean(op_df$R) + op_tl * 0.01) +
mean(tl_df$R) + -op_tl * 0.01)
jogo4 <- (mean(xset_df$R) + xset_fntc * 0.01) / ((mean(xset_df$R) + xset_fntc * 0.01) +
mean(fntc_df$R) + -xset_fntc * 0.01)
jogo5 <- (mean(fpx_df$R) + fpx_lev * 0.01) / ((mean(fpx_df$R) + fpx_lev * 0.01) +
mean(lev_df$R) + -fpx_lev * 0.01)
jogo6 <- (mean(tl_df$R) + tl_fntc * 0.01) / ((mean(tl_df$R) + tl_fntc * 0.01) +
mean(fntc_df$R) + -tl_fntc * 0.01)
jogo7 <- (mean(drx_df$R) + drx_loud * 0.01) / ((mean(drx_df$R) + drx_loud * 0.01) +
mean(loud_df$R) + -drx_loud * 0.01)
jogo8 <- (mean(op_df$R) + -xset_op * 0.01) / ((mean(op_df$R) + -xset_op * 0.01) +
mean(xset_df$R) + xset_op * 0.01)
jogo9 <- (mean(xset_df$R) + xset_fpx * 0.01) / ((mean(xset_df$R) + xset_fpx * 0.01) +
mean(fpx_df$R) + -xset_fpx * 0.01)
jogo10 <- (mean(drx_df$R) + drx_fntc * 0.01) / ((mean(drx_df$R) + drx_fntc * 0.01) +
mean(fntc_df$R) + -drx_fntc * 0.01)
jogo11 <- (mean(loud_df$R) + loud_op * 0.01) / ((mean(loud_df$R) + loud_op * 0.01) +
mean(op_df$R) + -loud_op * 0.01)
jogo12 <- (mean(fpx_df$R) + -drx_fpx * 0.01) / ((mean(fpx_df$R) + -drx_fpx * 0.01) +
mean(drx_df$R) + drx_fpx * 0.01)
jogo13 <- (mean(loud_df$R) + loud_op * 0.01) / ((mean(loud_df$R) + loud_op * 0.01) +
mean(op_df$R) + -loud_op * 0.01)
jogo14 <- (mean(op_df$R) + -drx_op * 0.01) / ((mean(op_df$R) + -drx_op * 0.01) +
mean(drx_df$R) + drx_op * 0.01)
# Tentando criar um dataframe com os embates para usar na rede neural
resultado <- c('W', 'L', 'W', 'W', 'W', 'L', 'L', 'W', 'L', 'W', 'W', 'L', 'W', 'W')
jogo <- c(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14)
dataframeeE <- data.frame(resultado, jogo)
dataframe_1 <- dataframee + dataframeeE
dataframe_1 <- c(dataframee + dataframeeE)
dataframe_1 <- c(dataframee, dataframeeE)
dataframe_1 <- cbind(dataframee, dataframeeE)
View(dataframe_1)
?cbind
dataframe_1 <- rbind(dataframee, dataframeeE)
View(dataframe_1)
inp <- sample(2, nrow(dataframe_1), replace = TRUE, prob = c(0.7, 0.3))
training_data <- dataframe_1[inp==1, ]
test_data <- dataframe_1[inp==2, ]
n <- neuralnet(resultado ~ jogo,
data = dataframe_1,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'sag',
stepmax = 100000)
?neuralnet
n <- neuralnet(resultado ~ jogo,
data = dataframe_1,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
n <- neuralnet(resultado ~ jogo,
data = dataframe_1,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'slr+',
stepmax = 100000)
n <- neuralnet(resultado ~ jogo,
data = dataframe_1,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 100000)
n <- neuralnet(resultado ~ jogo,
data = dataframe_1,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
View(dataframe_1)
install.packages("h2o")
library(h2o)
h2o.init()
h2o.init()
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
idc_t5 <- ineq(tl_df$KAST, type = 'Gini')
idc_t6 <- ineq(lev_df$KAST, type = 'Gini')
idc_t7 <- ineq(fpx_df$KAST, type = 'Gini')
idc_t8 <- ineq(fntc_df$KAST, type = 'Gini')
# Colocando o indice de Gini em cada jogador para seu respectivo time
loud_df$idc <- idc_t1
op_df$idc <- idc_t2
drx_df$idc <- idc_t3
xset_df$idc <- idc_t4
tl_df$idc <- idc_t5
lev_df$idc <- idc_t6
fpx_df$idc <- idc_t7
fntc_df$idc <- idc_t8
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
# Colocando o indice de Gini em cada jogador para seu respectivo time
loud_df$idc <- idc_t1
op_df$idc <- idc_t2
drx_df$idc <- idc_t3
xset_df$idc <- idc_t4
tl_df$idc <- idc_t5
lev_df$idc <- idc_t6
fpx_df$idc <- idc_t7
fntc_df$idc <- idc_t8
# Removendo as variaveis idc_tn e times
#rm(idc_t1, idc_t2, idc_t3, idc_t4, idc_t5, idc_t6, idc_t7, idc_t8)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-6:-13]
fntc_df <- fntc_df[,-6:-13]
xset_df <- xset_df[,-6:-13]
drx_df <- drx_df[,-6:-13]
lev_df <- lev_df[,-6:-13]
op_df <- op_df[,-6:-13]
tl_df <- tl_df[,-6:-13]
fpx_df <- fpx_df[,-6:-13]
View(xset_df)
View(resultado)
View(op_df)
View(loud_df)
View(op_df)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
View(resultado)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
View(resultado)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
#resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
View(resultado)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-6:-13]
fntc_df <- fntc_df[,-6:-13]
xset_df <- xset_df[,-6:-13]
drx_df <- drx_df[,-6:-13]
lev_df <- lev_df[,-6:-13]
op_df <- op_df[,-6:-13]
tl_df <- tl_df[,-6:-13]
fpx_df <- fpx_df[,-6:-13]
time1 <- c(mean(drx_df$R))
time1 <- c(mean(drx_df$R), mean(fntc_df$R))
view(time1)
#
drxR <- mean(drx_df$R)
levR <- mean(lev_df$R)
opR <- mean(op_df$R)
xsetR <- mean(xset_df$R)
fpxR <- mean(fpx_df$R)
tlR <- mean(tl_df$R)
loudR <- mean(loud_df$R)
time1 <- c(drxR, levR, opR, xsetR, fpxR, tlR, drxR, opR, xsetR, drxR, loudR, fpxR, loudR, opR)
time2 <- c(fpxR, loudR, tlR, fntcR, levR, fntcR, loudR, xsetR, fpxR, fntcR, opR, drxR, opR, drxR)
fntcR <- mean(fntc_df$R)
time2 <- c(fpxR, loudR, tlR, fntcR, levR, fntcR, loudR, xsetR, fpxR, fntcR, opR, drxR, opR, drxR)
ganhador <- c(1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1)
jogos <- data.frame(time1, time2, ganhador)
View(jogos)
rm(drxR, levR, opR, xsetR, fpxR, tlR, loudR, fntcR)
rm(drxR, levR, opR, xsetR, fpxR, tlR, loudR, fntcR, time1, time2, ganhador)
