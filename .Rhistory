colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, url)
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
return(previsao$net.result)
}
preverResultado('https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf')
runApp()
install.packages(data.table)
install.packages('data.table')
library(data.table)
dados_gerais <- fread('csv/jogadores.csv')
runApp()
dados_gerais <- fread('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
runApp()
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
dados_gerais <- fread('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
View(dados_gerais)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = F)
View(dados_gerais)
row.names(dados_gerais) <- make.names(dados_gerais[,2], unique = T)
row.names(dados_gerais) <- make.names(dados_gerais[1,], unique = T)
View(dados_gerais)
?make.names
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
make.names(dados_gerais[,1])
1<-make.names(dados_gerais[,1])
1 <- make.names(dados_gerais[,1])
count(make.names(dados_gerais[,1]))
View(dados_gerais)
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
dados_gerais <- read.csv2("csv/jogadores.csv")
library(data.table)
dados_gerais <- fread("csv/jogadores.csv")
View(dados_gerais)
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
row.names(dados_gerais)
count(row.names(dados_gerais))
View(dados_gerais)
dados_gerais <- read.csv2("csv/jogadores.csv")
View(dados_gerais)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
View(dados_gerais)
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
View(dados_gerais)
?fread
load(file = "model_nnet.rda")
dados_gerais <- fread('csv/jogadores.csv')
View(dados_gerais)
str(dados_gerais)
dados_gerais <- fread('csv/jogadores.csv', check.names = T)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
dados_gerais <- fread('csv/jogadores.csv', check.names = T)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- read.csv2('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
runApp()
dados_gerais <- read.csv2('csv\jogadores.csv')
dados_gerais <- read.csv2('/csv/jogadores.csv')
dados_gerais <- read.csv2('C:/Users/anonb/Documents/TCC Pós/Scripts/csv/jogadores.csv')
runApp()
dados_gerais <- read.csv2("csv/jogadores.csv")
runApp()
dados_gerais <- read.csv('csv/jogadores.csv')
dados_gerais <- read.csv('csv/jogadores.csv', sep = ',')
dados_gerais <- read.csv('csv/jogadores.csv', header = header)
dados_gerais <- read.csv('csv/jogadores.csv', header = X)
dados_gerais <- read.csv('csv/jogadores.csv', header = 'X')
dados_gerais <- read.csv('csv/jogadores.csv', header = 1)
dados_gerais <- read.csv('csv/jogadores.csv', header = T)
load(file = "csv/jogadores.csv")
dados_gerais <- read.csv2('jogadores.csv')
runApp()
dados_gerais <- fread('csv/jogadores.csv')
runApp()
runApp()
dados_gerais <- fread('csv/jogadores.csv', check.names = T)
View(dados_gerais)
runApp()
names <- make.names(dados_gerais[,1], unique = T)
names <- make.names(dados_gerais$V1, unique = T)
row.names(dados_gerais) <- make.names(dados_gerais$Player, unique = T)
View(dados_gerais)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais$Player, unique = T)
rm(names)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
row_number(dados_gerais)
row_numbers(dados_gerais)
nrow(dados_gerais)
if(nrow(dados_gerais) >= 5)
nrow(dados_gerais) >= 5
nrow(dados_gerais) => 5
nrow(dados_gerais) = 5
nrow(dados_gerais) == 5
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(bs_theme)
library(bslib)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
?atan
atan(2)
pi
transforma_positivo <- function (x){
atan(x) + pi/2
}
transforma_positivo(2)
transforma_positivo(-2)
transforma_positivo(-5)
transforma_positivo(-500)
transforma_positivo(-50000)
transforma_positivo <- function (previsaoInput){
atan(x) + pi/2
return (x)
}
transforma_positivo(5)
transforma_positivo <- function (x){
atan(x) + pi/2
return (x)
}
transforma_positivo(5)
return ()
y = atan(x) + pi/2
transforma_positivo <- function (x){
y = atan(x) + pi/2
return ()
}
transforma_positivo(5)
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_positivo(5)
transforma_positivo(6)
transforma_positivo(-5)
x <- previsaoInput()
preverResultado <- function (url){
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
load(file = "model_nnet.rda")
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, url)
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
return(previsao$net.result)
}
preverResultado('https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf')
return <- preverResultado('https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf')
View(return)
a <- return[1]
b <- return[2]
runApp()
a + b
c = c(a,b)
shiny::runApp()
preverResultado('https://www.vlr.gg/161163/detonation-focusme-vs-fnatic-riot-games-one-pro-invitational-showmatch-dfm')
previsao <- previsao$net.result
previsao <- preverResultado('https://www.vlr.gg/161163/detonation-focusme-vs-fnatic-riot-games-one-pro-invitational-showmatch-dfm')
a <- previsao[1]
b <- previsao[2]
transforma_positivo <- function (x){
y = atan(x) + pi/2
return (y)
}
transforma_probabilidade <- function (y, x){
z = y / (y + x)
w = x / (x + y)
c = as.matrix(c(z,w))
return(c)
}
transforma_positivo(a)
transforma_positivo(b)
a <- transforma_positivo(a)
b <- transforma_positivo(b)
transforma_probabilidade(a,b)
previsao <- c
previsao <- transforma_probabilidade(a,b)
runApp()
runApp()
runApp()
?round
runApp()
?paste
output$txtout <- renderText(paste(round(previsaoInput(), digits = 2)), porcentagem)
runApp()
runApp()
runApp()
?textOutput
runApp()
?paste
runApp()
runApp()
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
# Carregando o dataframe -----------------------------------------------------------------------------------
jogos <- read.csv2('csv/jogos.csv') %>% dplyr::select(-X)
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(33)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Salvando o modelo
save(n, file = "model_nnet.rda")
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(33)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(5,5),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(5,5),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(5,5,5),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(5),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,5),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(6,6),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
