predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(30,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(30,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(40,40,40),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(5,5,5),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.82) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(5,5,5),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
# Matriz de confusÃ£o
load('model_nnet.rda')
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
nn2 <- as.factor(nn2)
confusionMatrix(nn2, test_data$ganhador)
View(n)
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(9,9,9),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(11,11,11),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(13,13,13),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.80) {
acharnn()
}
# Carregando pacotes -------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(httr)
library(ggplot2)
# Carregando o dataframe -----------------------------------------------------------------------------------
jogos <- read.csv2('csv/df.csv') %>% dplyr::select(-X)
jogadores <- read.csv2('csv/jogadores.csv') %>% dplyr::select(-X)
ggplot(data = jogos)
ggplot(data = jogos$time1R)
geom_point(data = jogos)
ggplot(data = jogadores)
ggplot(data = jogadores$Player)
ggplot(data = jogadores$Rnd)
jogadores %>%
group_by(Rnd) %>%
summarise(r = mean(r, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = Rnd, y = r))
jogadores %>%
group_by(Rnd) %>%
summarise(R = mean(r, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = Rnd, y = R))
jogadores %>%
group_by(Rnd) %>%
summarise(R = mean(R, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = Rnd, y = R))
jogadores %>%
group_by(Rnd) %>%
summarise(ACS = mean(ACS, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = Rnd, y = ACS))
jogadores %>%
group_by(R) %>%
summarise(ACS = mean(ACS, na.rm = TRUE)) %>%
ggplot() +
geom_line(aes(x = R, y = ACS))
jogos %>%
group_by(ganhador) %>%
ggplot() +
geom_line(aes(x = ganhador, y = time1R))
jogos %>%
group_by(time2R) %>%
ggplot() +
geom_line(aes(x = time2R, y = time1R))
jogos %>%
group_by(time2R) %>%
ggplot() +
geom_line(aes(x = time2R, y = time1R)) +
geom_point(aes(x = time2R, y = time1R))
# Carregando pacotes -------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(httr)
library(ggplot2)
# Carregando o dataframe -----------------------------------------------------------------------------------
jogos <- read.csv2('csv/df.csv') %>% dplyr::select(-X)
jogadores <- read.csv2('csv/jogadores.csv') %>% dplyr::select(-X)
histogram(jogadores)
??histogram
hist(jogadores)
hist(jogadores$Player)
hist(jogadores$Rnd)
hist(jogadores$K.D)
hist(jogos)
hist(jogos$time1R)
hist(jogos$time2R)
hist(jogos$time1R ~ jogos$time2R)
hist(jogos$time1R)
hist(jogos$time2R)
ggplot(jogadores, aes(R, KD))
ggplot(jogadores, aes(R, K.D))
ggplot(jogadores, aes(R, K.D)) +
geom_line()
ggplot(jogadores, aes(R, K.D)) +
geom_point()
ggplot(jogadores, aes(R, K.D)) +
geom_density()
ggplot(jogadores, aes(R, K.D)) +
geom_bar()
ggplot(jogadores, aes(R, K.D)) +
geom_point()
ggplot(jogadores, aes(R, K.D)) +
geom_point() +
geom_line()
ggplot(jogadores, aes(R, IK)) +
geom_point() +
geom_line()
ggplot(jogadores, aes(R, IK)) +
geom_point()
ggplot(jogadores, aes(IK, R)) +
geom_point()
ggplot(jogadores, aes(ACS, R)) +
geom_point()
hist(jogos$time1R)
hist(jogadores$Rnd)
hist(jogadores$R)
hist(jogadores$IK)
hist(jogadores$HS.)
hist(as.numeric(jogadores$HS.))
hist(as.numeric(jogadores$HS.))
hist(jogadores$ADR)
url <- 'https://www.vlr.gg/stats'
library(httr)
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = n, n = 10) %>%
mutate(R = forcats::fct_reorder(R, n)) %>%
ggplot() +
geom_col(aes(x = R, y = n, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = n/2, label = n)) +
coord_flip()
jogadores %>%
couK.Dt(R) %>%
filter(!is.K.Da(R)) %>%
slice_max(order_by = K.D, K.D = 10) %>%
mutate(R = forcats::fct_reorder(R, K.D)) %>%
ggplot() +
geom_col(aes(x = R, y = K.D, fill = R), show.legeK.Dd = FALSE) +
geom_label(aes(x = R, y = K.D/2, label = K.D)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.K.Da(R)) %>%
slice_max(order_by = K.D, K.D = 10) %>%
mutate(R = forcats::fct_reorder(R, K.D)) %>%
ggplot() +
geom_col(aes(x = R, y = K.D, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = K.D/2, label = K.D)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = K.D, K.D = 10) %>%
mutate(R = forcats::fct_reorder(R, K.D)) %>%
ggplot() +
geom_col(aes(x = R, y = K.D, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = K.D/2, label = K.D)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = n, n = 10) %>%
mutate(R = forcats::fct_reorder(R, n)) %>%
ggplot() +
geom_col(aes(x = R, y = n, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = n/2, label = n)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = n, n = 10) %>%
ggplot() +
geom_col(aes(x = R, y = n, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = n/2, label = n)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = n, n = 100) %>%
ggplot() +
geom_col(aes(x = R, y = n, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = n/2, label = n)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = n, n = 50) %>%
ggplot() +
geom_col(aes(x = R, y = n, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = n/2, label = n)) +
coord_flip()
jogadores %>%
count(R) %>%
filter(!is.na(R)) %>%
slice_max(order_by = n, n = 25) %>%
ggplot() +
geom_col(aes(x = R, y = n, fill = R), show.legend = FALSE) +
geom_label(aes(x = R, y = n/2, label = n)) +
coord_flip()
shiny::runApp()
runApp()
View(jogadores)
url <- 'https://www.vlr.gg/rankings'
read_html(url) %>%
html_node(div = 'world-rankings-col')
read_html(url) %>%
html_node(div = 'world-rankings-col') %>%
html_table()
read_html(url) %>%
html_node(class = 'world-rankings-col') %>%
html_table()
read_html(url) %>%
html_node(class = 'world-rankings-col') %>%
html_table()
read_html(url) %>%
html_nodes(class = 'world-rankings-col') %>%
html_table()
read_html(url) %>%
html_nodes(div = 'world-rankings-col') %>%
html_table()
read_html(url) %>%
html_nodes('world-rankings-col') %>%
html_table()
a <- read_html(url) %>%
html_nodes('world-rankings-col') %>%
html_table()
?html_nodes
a <- read_html(url) %>%
html_nodes('div.world-rankings-col') %>%
html_table()
View(a)
unlist(a)
b <- unlist(a)
a1 <- a[1]
View(a1)
df <- df %>% map_df(as_tibble)
library(purrr)
df <- df %>% map_df(as_tibble)
library(tibble)
df <- df %>% map_df(as_tibble)
library(readr)
df <- df %>% map_df(as_tibble)
df <- a %>% map_df(as_tibble)
View(df)
View(df)
colnames(df) <- c('Ranking', 'Time', 'Pontos')
a <- read_html(url) %>%
html_nodes('div.world-rankings-col') %>%
html_table()
df <- a %>% map_df(as_tibble) %>% colnames <- c('Ranking', 'Time', 'Pontos')
# Carregando pacotes -------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(httr)
library(ggplot2)
library(httr)
library(purrr)
library(readr)
df <- a %>% map_df(as_tibble) %>% colnames() <- c('Ranking', 'Time', 'Pontos')
df <- a %>% map_df(as_tibble) %>% colnames(df) <- c('Ranking', 'Time', 'Pontos')
df <- a %>% map_df(as_tibble)
colnames(df) <- c('Ranking', 'Time', 'Pontos')
runApp()
melhores_times <- a %>% map_df(as_tibble)
melhores_times <- a %>% map_df(as_tibble)
colnames(melhores_times) <- c('Ranking', 'Time', 'Pontos')
rm(df)
write.csv(melhores_times, 'csv/melhores_times.csv')
runApp()
