n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(9,9),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(11,11),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(20,20),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(30,30),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10,7),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10,7,5,2),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10,7,5,10),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10,7,5,10),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10,7,5,10),
err.fct = "sse",
linear.output = T,
threshold = 0.1,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 2)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10,7,5,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,7,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
View(training_data)
nn1 <- ifelse(n$net.result[[1]]>0.5,0,1)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
OutPutVsPred$V1 <- gsub(2, 0, OutPutVsPred$V1)
View(OutPutVsPred)
Predict = compute(n, test_data)
Predict$net.result
predictVstest <- cbind(test_data, Predict$net.result)
View(predictVstest)
prob <- Predict$net.result
pred <- ifelse(prob > 0.5, 'Win', 'Lose')
pred
View(test_data)
predictVstest <- cbind(test_data$ganhador, pred)
# CHAMPIONS TOUR EAST ASIA LAST CHANCE QUALIFIER -----------------------------------------------------------
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# CHAMPIONS TOUR EAST ASIA LAST CHANCE QUALIFIER -----------------------------------------------------------
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos da competição CHAMPIONS
#Maru Gaming
mg = c('Chibab', 'Jeong Hi', 'WIX', 'Moves', 'NakJi') # Definindo o time 1
mg <- paste0('\\b', mg, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$mg <- ifelse(grepl(paste(mg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DAMWON Gaming
dwgc = c('exy', 'Lakia', 'Esperanza', 'allow', 't3xture')
dwgc <- paste0('\\b', dwgc, '\\b')
dados_gerais$dwgc <- ifelse(grepl(paste(dwgc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#edg
edg = c('nobody', 'Life', 'ZmjjKK', 'Haodong', 'CHICHOO')
edg <- paste0('\\b', edg, '\\b')
dados_gerais$edg <- ifelse(grepl(paste(edg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#s2
s2 = c('Bazzi', 'TS', 'eKo', 'GodDead', 'Estrella')
s2 <- paste0('\\b', s2, '\\b')
dados_gerais$s2 <- ifelse(grepl(paste(s2, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#nth
nth = c('Derialy', 'JoXJo', 'xnfri', 'BlackWiz', 'Meteor')
nth <- paste0('\\b', nth, '\\b')
dados_gerais$nth <- ifelse(grepl(paste(nth, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#cr
cr = c('rion', 'neth', 'popogachi', 'Meiy', 'Astell')
cr <- paste0('\\b', cr, '\\b')
dados_gerais$cr <- ifelse(grepl(paste(cr, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Reject
rc = c('iNTRO', 'Medusa', 'takej', 'Reita', 'Anthem')
rc <- paste0('\\b', rc, '\\b')
dados_gerais$rc <- ifelse(grepl(paste(rc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#Guild Esports
kone = c('LuoK1ng', 'sword9', 'Ninebody', 'Knight', 'Yosemite')
kone <- paste0('\\b', kone, '\\b')
dados_konerais$kone <- ifelse(grepl(paste(kone, collapse = '|'), rownames(dados_konerais), useBytes = T), 1, 0)
resultado <- filter(dados_konerais, dados_konerais$mg == 1 | dados_konerais$dwgc == 1 | dados_konerais$edg == 1
| dados_konerais$s2 == 1 | dados_konerais$nth == 1 | dados_konerais$cr == 1 |
dados_konerais$rc == 1 | dados_konerais$kone == 1)
resultado <- filter(dados_gerais, dados_gerais$mg == 1 | dados_gerais$dwgc == 1 | dados_gerais$edg == 1
| dados_gerais$s2 == 1 | dados_gerais$nth == 1 | dados_gerais$cr == 1 |
dados_gerais$rc == 1 | dados_gerais$kone == 1)
# Definindo times especificos da competição CHAMPIONS
#Maru Gaming
mg = c('Chibab', 'Jeong Hi', 'WIX', 'Moves', 'NakJi') # Definindo o time 1
mg <- paste0('\\b', mg, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$mg <- ifelse(grepl(paste(mg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DAMWON Gaming
dwgc = c('exy', 'Lakia', 'Esperanza', 'allow', 't3xture')
dwgc <- paste0('\\b', dwgc, '\\b')
dados_gerais$dwgc <- ifelse(grepl(paste(dwgc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#edg
edg = c('nobody', 'Life', 'ZmjjKK', 'Haodong', 'CHICHOO')
edg <- paste0('\\b', edg, '\\b')
dados_gerais$edg <- ifelse(grepl(paste(edg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#s2
s2 = c('Bazzi', 'TS', 'eKo', 'GodDead', 'Estrella')
s2 <- paste0('\\b', s2, '\\b')
dados_gerais$s2 <- ifelse(grepl(paste(s2, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#nth
nth = c('Derialy', 'JoXJo', 'xnfri', 'BlackWiz', 'Meteor')
nth <- paste0('\\b', nth, '\\b')
dados_gerais$nth <- ifelse(grepl(paste(nth, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#cr
cr = c('rion', 'neth', 'popogachi', 'Meiy', 'Astell')
cr <- paste0('\\b', cr, '\\b')
dados_gerais$cr <- ifelse(grepl(paste(cr, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Reject
rc = c('iNTRO', 'Medusa', 'takej', 'Reita', 'Anthem')
rc <- paste0('\\b', rc, '\\b')
dados_gerais$rc <- ifelse(grepl(paste(rc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#Guild Esports
kone = c('LuoK1ng', 'sword9', 'Ninebody', 'Knight', 'Yosemite')
kone <- paste0('\\b', kone, '\\b')
dados_gerais$kone <- ifelse(grepl(paste(kone, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$mg == 1 | dados_gerais$dwgc == 1 | dados_gerais$edg == 1
| dados_gerais$s2 == 1 | dados_gerais$nth == 1 | dados_gerais$cr == 1 |
dados_gerais$rc == 1 | dados_gerais$kone == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Separando os times em dataframes
mg_df <- filter(resultado, resultado$mg == 1)
dwgc_df <- filter(resultado, resultado$dwgc == 1)
edg_df <- filter(resultado, resultado$edg == 1)
s2_df <- filter(resultado, resultado$s2 == 1)
nth_df <- filter(resultado, resultado$nth == 1)
cr_df <- filter(resultado, resultado$cr == 1)
rc_df <- filter(resultado, resultado$rc == 1)
kone_df <- filter(resultado, resultado$kone == 1)
rm(mg, dwgc, edg, s2, nth, cr, rc, kone)
View(dwgc_df)
# Tirando colunas de times dos dataframes especificos de cada time
mg_df <- mg_df[,-6:-13]
kone_df <- kone_df[,-6:-13]
s2_df <- s2_df[,-6:-13]
edg_df <- edg_df[,-6:-13]
cr_df <- cr_df[,-6:-13]
dwgc_df <- dwgc_df[,-6:-13]
nth_df <- nth_df[,-6:-13]
rc_df <- rc_df[,-6:-13]
# Média R (Rating)
edgR <- mean(edg_df$R)
crR <- mean(cr_df$R)
dwgcR <- mean(dwgc_df$R)
s2R <- mean(s2_df$R)
rcR <- mean(rc_df$R)
nthR <- mean(nth_df$R)
mgR <- mean(mg_df$R)
koneR <- mean(kone_df$R)
# Média ACS
edgACS <- mean(edg_df$ACS)
crACS <- mean(cr_df$ACS)
dwgcACS <- mean(dwgc_df$ACS)
s2ACS <- mean(s2_df$ACS)
rcACS <- mean(rc_df$ACS)
nthACS <- mean(nth_df$ACS)
mgACS <- mean(mg_df$ACS)
koneACS <- mean(kone_df$ACS)
# Média KD
edgKD <- mean(edg_df$K.D)
crKD <- mean(cr_df$K.D)
dwgcKD <- mean(dwgc_df$K.D)
s2KD <- mean(s2_df$K.D)
rcKD <- mean(rc_df$K.D)
nthKD <- mean(nth_df$K.D)
mgKD <- mean(mg_df$K.D)
koneKD <- mean(kone_df$K.D)
# Média KAST
edgKAST <- mean(edg_df$KAST)
crKAST <- mean(cr_df$KAST)
dwgcKAST <- mean(dwgc_df$KAST)
s2KAST <- mean(s2_df$KAST)
rcKAST <- mean(rc_df$KAST)
nthKAST <- mean(nth_df$KAST)
mgKAST <- mean(mg_df$KAST)
koneKAST <- mean(kone_df$KAST)
# Média ADR
edgADR <- mean(edg_df$ADR)
crADR <- mean(cr_df$ADR)
dwgcADR <- mean(dwgc_df$ADR)
s2ADR <- mean(s2_df$ADR)
rcADR <- mean(rc_df$ADR)
nthADR <- mean(nth_df$ADR)
mgADR <- mean(mg_df$ADR)
koneADR <- mean(kone_df$ADR)
#Criando o dataframe
time1R <- c(mgR, dwgcR, nthR, koneR, mgR, s2R, rcR, nthR, crR, rcR, dwgcR, mgR, dwgcR, nthR)
time2R <- c(rcR, edgR, s2R, crR, edgR, koneR, dwgcR, crR, mgR, koneR, nthR, rcR, nthR, mgR)
#Criando o dataframe
time1R <- c(edgR, mgR, crR, nthR, s2R, dwgcR, edgR, crR, crR, rcR, edgR, s2R, edgR, nthR)
time2R <- c(s2R, rcR, dwgcR, koneR, mgR, koneR, rcR, nthR, s2R, koneR, nthR, koneR, s2R, s2R)
time1ACS <- c(edgACS, mgACS, crACS, nthACS, s2ACS, dwgcACS, edgACS, crACS, crACS, rcACS, edgACS, s2ACS, edgACS, nthACS)
time2ACS <- c(s2ACS, rcACS, dwgcACS, koneACS, mgACS, koneACS, rcACS, nthACS, s2ACS, koneACS, nthACS, koneACS, s2ACS, s2ACS)
time1KD <- c(edgKD, mgKD, crKD, nthKD, s2KD, dwgcKD, edgKD, crKD, crKD, rcKD, edgKD, s2KD, edgKD, nthKD)
time2KD <- c(s2KD, rcKD, dwgcKD, koneKD, mgKD, koneKD, rcKD, nthKD, s2KD, koneKD, nthKD, koneKD, s2KD, s2KD)
time1KAST <- c(edgKAST, mgKAST, crKAST, nthKAST, s2KAST, dwgcKAST, edgKAST, crKAST, crKAST, rcKAST, edgKAST, s2KAST, edgKAST, nthKAST)
time2KAST <- c(s2KAST, rcKAST, dwgcKAST, koneKAST, mgKAST, koneKAST, rcKAST, nthKAST, s2KAST, koneKAST, nthKAST, koneKAST, s2KAST, s2KAST)
time1ADR <- c(edgADR, mgADR, crADR, nthADR, s2ADR, dwgcADR, edgADR, crADR, crADR, rcADR, edgADR, s2ADR, edgADR, nthADR)
time2ADR <- c(s2ADR, rcADR, dwgcADR, koneADR, mgADR, koneADR, rcADR, nthADR, s2ADR, koneADR, nthADR, koneADR, s2ADR, s2ADR)
ganhador <- c(1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0)
jogos <- data.frame(time1R, time2R, time1ACS, time2ACS, time1KD, time2KD, time1KAST, time2KAST, time1ADR, time2ADR, ganhador)
write.csv2(jogos, 'jogos6.csv')
rm(list = ls())
jogos6 <- read.csv2('jogos6.csv') %>% dplyr::select(-X)
# União dos dataframes -------------------------------------------------------------------------------------
jogos1 <- read.csv2('jogos.csv') %>% dplyr::select(-X)
jogos2 <- read.csv2('jogos2.csv') %>% dplyr::select(-X)
jogos3 <- read.csv2('jogos3.csv') %>% dplyr::select(-X)
jogos4 <- read.csv2('jogos4.csv') %>% dplyr::select(-X)
jogos5 <- read.csv2('jogos5.csv') %>% dplyr::select(-X)
jogos6 <- read.csv2('jogos6.csv') %>% dplyr::select(-X)
jogos <- rbind(jogos1, jogos2, jogos3, jogos4, jogos5, jogos6)
jogos$ganhador <- as.factor(jogos$ganhador)
View(jogos)
library(neuralnet)
# Normalizando os dados (aplicando normalize) -------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
rm(jogos1, jogos2, jogos3, jogos4, jogos5, jogos6)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(13)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(1)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,7,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(5, 5),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(5, 5),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 10,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(9,9),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
View(training_data)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(1)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(9,9),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
View(jogos)
