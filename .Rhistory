lapply(str_replace_all, '\t', ' ') %>%
lapply(str_replace_all, '  ', '')
# Time 2
ds_time2[-1] <- lapply(ds_time2[-1], str_replace_all, "\n", ' ') %>%
lapply(str_replace_all, ' ', '')
# Deixando apenas as linhas que tenha 1 ou mais caracteres na coluna Map ----------------------------------
ds_time1 <- subset(ds_time1, nchar(gsub("[^a-z]", "", ds_time1$`Map (#)`)) > 0)
ds_time2 <- subset(ds_time2, nchar(gsub("[^a-z]", "", ds_time2$`Map (#)`)) > 0)
# Comparando os dois times em todos os mapas e retornando um dataframe com esse feedback ------------------
ds_times <- ds_time1
ds_times$vantagem <- ifelse(ds_time1$`WIN%` > ds_time2$`WIN%`, 'Time1',
ifelse(ds_time1$`WIN%` < ds_time2$`WIN%`, 'Time2', 'Empate'))
ds_times <- select(ds_times, `Map (#)`, `vantagem`)
View(ds_time1)
View(ds_times)
rm(ds_time1, ds_time2, ds_time3)
rm(ds_times)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(lubridate)
# Urls ----------------------------------------------------------------------------------------------------
url <- "https://www.vlr.gg/team/stats/6961/loud/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_adversarios <- read_html(url) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_adversarios)[9] <- 'RW ATK'
names(ds_adversarios)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_adversarios <- select(ds_adversarios, -Expand) %>%
select( -'Agent Compositions')
ds_adversarios[-1] <- lapply(ds_adversarios[-1], str_replace_all, "\t", ' ')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_adversarios <- subset(ds_adversarios, nchar(gsub("[^a-z]", "", ds_adversarios$`Map (#)`)) < 1)
ds_adversarios[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios$`WIN%`, '\n', 2)
ds_adversarios[c('Adversario', 'Resultado')] <- str_split_fixed(
ds_adversarios$Resultado, '\n\n\n', 2)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_adversarios[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios$`WIN%`, ' ', 2)
# Selecionando apenas Data, Resultado e Adversario para o nosso dataframe ---------------------------------
ds_adversarios <- select(ds_adversarios, 'Data', 'Resultado', 'Adversario')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_adversarios$Data <- as_date(ds_adversarios$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_adversarios$Resultado <- gsub("[^0-9/ .-]", "", ds_adversarios$Resultado)# Deixando apenas números e "/"
#
ds_adversarios$Resultado <- substr(ds_adversarios$Resultado,
gregexpr("/", ds_adversarios$Resultado)[[1]][1] - 3,
gregexpr("/", ds_adversarios$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_adversarios <- separate(ds_adversarios, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_adversarios$RL <- sub(" .*", "", ds_adversarios$RL) # Tirando todos os caracteres que estavam à direita
ds_adversarios$RW <- sub("*. ", "", ds_adversarios$RW) # Tirando todos os caracteres que estavam à esquerda
ds_adversarios$RW <- sub(" ", "", ds_adversarios$RW) # Tirando todos os espaços
ds_adversarios$RL <- sub(" ", "", ds_adversarios$RL) # Tirando todos os espaços
ds_adversarios$Resultados <- as.numeric(ds_adversarios$RW) > as.numeric(ds_adversarios$RL) # Criando uma coluna de resultados
ds_adversarios$Resultados <- replace(ds_adversarios$Resultados, ds_adversarios$Resultados == TRUE, 'Win') %>%
replace(ds_adversarios$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
# Limpando a coluna 'Adversario' --------------------------------------------------------------------------
ds_adversarios[-1] <- lapply(ds_adversarios[-1], str_replace_all, "\\s", ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ')
ds_adversarios[-1] <- lapply(ds_adversarios[-1], str_replace_all, "  ", '')
View(ds_adversarios)
# Urls ----------------------------------------------------------------------------------------------------
url <- "https://www.vlr.gg/team/stats/6961/loud/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_time <- read_html(url) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_time)[9] <- 'RW ATK'
names(ds_time)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_time <- select(ds_time, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
ds_time[-1] <- lapply(ds_time[-1], str_replace_all, "\n", ' ') %>%
lapply(str_replace_all, '\t', ' ') %>%
lapply(str_replace_all, '  ', '')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_time <- subset(ds_time, nchar(gsub("[^a-z]", "", ds_time$`Map (#)`)) < 1)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_time[c('Data', 'Resultado')] <- str_split_fixed(
ds_time$`WIN%`, ' ', 2)
# Selecionando apenas Data e Resultado para o nosso dataframe ---------------------------------------------
ds_time <- select(ds_time, 'Data', 'Resultado')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_time$Data <- as_date(ds_time$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_time$Resultado <- gsub("[^0-9/ .-]", "", ds_time$Resultado)# Deixando apenas números e "/"
#
ds_time$Resultado <- substr(ds_time$Resultado,
gregexpr("/", ds_time$Resultado)[[1]][1] - 3,
gregexpr("/", ds_time$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_time <- separate(ds_time, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_time$RL <- sub(" .*", "", ds_time$RL) # Tirando todos os caracteres que estavam à direita
ds_time$RW <- sub("*. ", "", ds_time$RW) # Tirando todos os caracteres que estavam à esquerda
ds_time$RW <- sub(" ", "", ds_time$RW) # Tirando todos os espaços
ds_time$RL <- sub(" ", "", ds_time$RL) # Tirando todos os espaços
ds_time$Resultados <- as.numeric(ds_time$RW) > as.numeric(ds_time$RL) # Criando uma coluna de resultados
ds_time$Resultados <- replace(ds_time$Resultados, ds_time$Resultados == TRUE, 'Win') %>%
replace(ds_time$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
RW <- sum(as.numeric(ds_time$RW)) # rwins = rounds wins (rounds vitoriosos)
RL <- sum(as.numeric(ds_time$RL)) # rls = rounds loses (rounds perdidos)
Resultados <- RW - RL # saldo = rounds wins - rounds loses
rounds <- data.frame(RW, RL, Resultados) # passando para um dataframe
ds_time <- select(ds_time, -Data)
rounds$RW <- as.character(rounds$RW)
rounds$RL <- as.character(rounds$RL)
rounds$Resultados <- as.character(rounds$Resultados)
ds_time <- rbind(ds_time, rounds)
View(ds_time)
View(ds_adversarios)
View(ds_adversarios)
loud_lev = 0
if(ds_adversarios$Adversario == 'Leviatán'){
loud_w_lev = loud_w_lev + 1
}
?for
??for
??for
ds_adversarios$Adversario == 'Leviatán'
a <- ds_adversarios$Adversario == 'Leviatán'
a
a <- ds_adversarios$Adversario == 'Leviatán'== T
a <- ds_adversarios$Adversario == 'Leviatán' = T
ds_adversarios$Adversario == 'Leviatán' == T
ds_adversarios$Adversario == 'Leviatán' = T
View(ds_adversarios)
?count
count(ds_adversarios$Adversario == 'Leviatán')
count(ds_adversarios$Adversario = 'Leviatán')
sum(ds_adversarios$Adversario = 'Leviatán')
sum(ds_adversarios$Adversario == 'Leviatán')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Lose')
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
loud_lev <- sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios$Resultados == 'Win')
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
rm(a)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R)
medialev <- mean(lev_df$R)
mediaxset <- mean(xset_df$R)
mediafpx <- mean(fpx_df$R)
mediadrx <- mean(drx_df$R)
mediaop <- mean(op_df$R)
mediafntc <- mean(fntc_df$R)
mediatl <- mean(tl_df$R)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
loud_lev = 0
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R) + 1/mean(loud_df$idc)
medialev <- mean(lev_df$R) + 1/mean(lev_df$idc)
mediaxset <- mean(xset_df$R) + 1/mean(xset_df$idc)
mediafpx <- mean(fpx_df$R) + 1/mean(fpx_df$idc)
mediadrx <- mean(drx_df$R) + 1/mean(drx_df$idc)
mediaop <- mean(op_df$R) + 1/mean(op_df$idc)
mediafntc <- mean(fntc_df$R) + 1/mean(fntc_df$idc)
mediatl <- mean(tl_df$R) + 1/mean(tl_df$idc)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 < 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
loud_lev = 0
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 > 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
loud_lev = 0
mediatl <- mean(tl_df$R)
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R)
medialev <- mean(lev_df$R)
mediaxset <- mean(xset_df$R)
mediafpx <- mean(fpx_df$R)
mediadrx <- mean(drx_df$R)
mediaop <- mean(op_df$R)
mediafntc <- mean(fntc_df$R)
mediatl <- mean(tl_df$R)
# Porcentagem de vitória
jogo1 <- round(mediadrx / (mediadrx + mediafpx), 3)
jogo2 <- round(medialev / (medialev + medialoud), 3)
jogo3 <- round(mediaop / (mediaop + mediatl), 3)
jogo4 <- round(mediaxset / (mediaxset + mediafntc), 3)
jogo5 <- round(mediafpx / (mediafpx + medialev), 3)
jogo6 <- round(mediatl / (mediatl + mediafntc), 3)
jogo7 <- round(mediadrx / (mediadrx + medialoud), 3)
jogo8 <- round(mediaop / (mediaop + mediaxset), 6)
jogo9 <- round(mediaxset / (mediaxset + mediafpx), 3)
jogo10 <- round(mediadrx / (mediadrx + mediafntc), 3)
jogo11 <- round(medialoud / (medialoud + mediaop), 3)
jogo12 <- round(mediafpx / (mediafpx + mediadrx), 3)
jogo13 <- round(mediaxloud / (medialoud + mediaop), 3)
jogo14 <- round(mediaop / (mediaop + mediadrx), 6)
acertos = 0
analisa_resultados = function(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11, jogo12,
jogo13, jogo14){
if(jogo1 > 0.50){
acertos = acertos + 1
}
if(jogo2 < 0.50){
acertos = acertos + 1
}
if(jogo3 > 0.50){
acertos = acertos + 1
}
if(jogo4 > 0.50){
acertos = acertos + 1
}
if(jogo5 > 0.50){
acertos = acertos + 1
}
if(jogo6 < 0.50){
acertos = acertos + 1
}
if(jogo7 < 0.50){
acertos = acertos + 1
}
if(jogo8 > 0.50){
acertos = acertos + 1
}
if(jogo9 < 0.50){
acertos = acertos + 1
}
if(jogo10 > 0.50){
acertos = acertos + 1
}
if(jogo11 > 0.50){
acertos = acertos + 1
}
if(jogo12 < 0.50){
acertos = acertos + 1
}
if(jogo13 > 0.50){
acertos = acertos + 1
}
if(jogo14 > 0.50){
acertos = acertos + 1
}
return(acertos/14)
}
analisa_resultados(jogo1, jogo2, jogo3, jogo4, jogo5, jogo6, jogo7, jogo8, jogo9, jogo10, jogo11,
jogo12, jogo13, jogo14)
