stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 30,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'backprop',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 30,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'prop-',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 30,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'rprop-',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 30,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "ce",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "sse",
threshold = 0.1,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "sse",
threshold = 0.2,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "sse",
threshold = 1.2,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 3,
err.fct = "sse",
threshold = 0.2,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.2,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.1,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.03,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ .,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.03,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
time1 + time2
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.03,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
n$result.matrix
Predict = compute(n, test_data)
prob <- Predict$net.result
pred <- ifelse(prob>0.5, 'Lose', 'Win')
View(pred)
View(test_data)
pred <- ifelse(prob>0.5, 'Win', 'Lose')
prob <- Predict$net.result
Predict$net.result
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.03,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
plot(n, rep = 1)
n$result.matrix
Predict = compute(n, test_data)
Predict$net.result
pred <- ifelse(prob>0.5, 'Win', 'Lose')
pred <- ifelse(prob[,1]>[,2], 'Win', 'Lose')
pred <- ifelse(prob[,1]>prob[,2], 'Win', 'Lose')
pred <- ifelse(prob[,1] > prob[,2], 'Win', 'Lose')
pred <- ifelse(prob[1,] > prob[2,], 'Win', 'Lose')
pred <- ifelse(prob[1,] > prob[2,], 'Win', 'Lose')
pred <- ifelse(prob[,1] > prob[,2], 'Win', 'Lose')
n$result.matrix
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.03,
lifesign = 'full',
rep = 3,
algorithm = 'rprop+',
stepmax = 1000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.03,
lifesign = 'full',
rep = 3,
algorithm = 'rprop-',
stepmax = 1000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.02,
lifesign = 'full',
rep = 3,
algorithm = 'rprop-',
stepmax = 1000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'rprop-',
stepmax = 1000)
?neuralnet
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
View(jogos)
n <- neuralnet(ganhador == 2 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 1000)
nteste <- neuralnet(ganhador == 1 ~ time1 + time2, jogos, hidden = 10, threshold = 0.01)
plot(nteste, rep = 1)
print(nteste)
n <- neuralnet(ganhador == 2 + ganhador == 1 ~ time1 + time2,
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.01,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 100000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
threshold = 0.001,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 100000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "ce",
threshold = 0.001,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "ce",
linear.output = F,
threshold = 0.001,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10,10),
err.fct = "ce",
linear.output = F,
threshold = 0.001,
lifesign = 'full',
rep = 3,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "ce",
linear.output = F,
threshold = 0.001,
lifesign = 'full',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "ce",
linear.output = F,
threshold = 0.001,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "ce",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
View(jogos)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.2,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
View(jogos)
jogos$time1 <- (jogos$time1 - min(jogos$time1)) / max(jogos$time1) - min(jogos$time1)
View(jogos)
jogos$time2 <- (jogos$time2 - min(jogos$time2)) / max(jogos$time2) - min(jogos$time2)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
nteste <- neuralnet(ganhador == 1 ~ time1 + time2, jogos, hidden = 10, threshold = 0.01)
plot(nteste, rep = 1)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
?glm
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = training_data,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = test_data,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 1)
glm(ganhador ~ time1 + time2, family = gaussian, jogos)
# use the model to predict with new data
predOut <- predict(object = poissonOut, newdata = newDat, type = "response")
# use the model to predict with new data
predOut <- predict(object = jogos, newdata = newDat, type = "response")
a <- glm(ganhador ~ time1 + time2, family = gaussian, jogos)
# use the model to predict with new data
predOut <- predict(object = a, newdata = newDat, type = "response")
View(a)
newDat <- c(2, 3, 5)
# use the model to predict with new data
predOut <- predict(object = a, newdata = newDat, type = "response")
# use the model to predict with new data
predOut <- predict(object = a, newdata = jogos3, type = "response")
predOut
n <- neuralnet(time1 + time2 ~ ganhador,
data = test_data,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
