n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "ce",
linear.output = F,
threshold = 0.001,
lifesign = 'full',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "ce",
linear.output = F,
threshold = 0.001,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "ce",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = c(10, 10),
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
View(jogos)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.5,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.2,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
View(jogos)
jogos$time1 <- (jogos$time1 - min(jogos$time1)) / max(jogos$time1) - min(jogos$time1)
View(jogos)
jogos$time2 <- (jogos$time2 - min(jogos$time2)) / max(jogos$time2) - min(jogos$time2)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
nteste <- neuralnet(ganhador == 1 ~ time1 + time2, jogos, hidden = 10, threshold = 0.01)
plot(nteste, rep = 1)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
?glm
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = training_data,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = test_data,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 1)
glm(ganhador ~ time1 + time2, family = gaussian, jogos)
# use the model to predict with new data
predOut <- predict(object = poissonOut, newdata = newDat, type = "response")
# use the model to predict with new data
predOut <- predict(object = jogos, newdata = newDat, type = "response")
a <- glm(ganhador ~ time1 + time2, family = gaussian, jogos)
# use the model to predict with new data
predOut <- predict(object = a, newdata = newDat, type = "response")
View(a)
newDat <- c(2, 3, 5)
# use the model to predict with new data
predOut <- predict(object = a, newdata = newDat, type = "response")
# use the model to predict with new data
predOut <- predict(object = a, newdata = jogos3, type = "response")
predOut
n <- neuralnet(time1 + time2 ~ ganhador,
data = test_data,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# CHAMPIONS ---------------
# CHAMPIONS -------------------------------------------------------------------------------------------------
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
View(dados_gerais)
# Arrumando as colunas
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
# Definindo times especificos da competição CHAMPIONS
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
View(resultado)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Separando os times em dataframes
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-6:-13]
fntc_df <- fntc_df[,-6:-13]
xset_df <- xset_df[,-6:-13]
drx_df <- drx_df[,-6:-13]
lev_df <- lev_df[,-6:-13]
op_df <- op_df[,-6:-13]
tl_df <- tl_df[,-6:-13]
fpx_df <- fpx_df[,-6:-13]
#
drxR <- mean(drx_df$R)
levR <- mean(lev_df$R)
opR <- mean(op_df$R)
xsetR <- mean(xset_df$R)
fpxR <- mean(fpx_df$R)
tlR <- mean(tl_df$R)
loudR <- mean(loud_df$R)
fntcR <- mean(fntc_df$R)
time1 <- c(drxR, levR, opR, xsetR, fpxR, tlR, drxR, opR, xsetR, drxR, loudR, fpxR, loudR, opR)
time2 <- c(fpxR, loudR, tlR, fntcR, levR, fntcR, loudR, xsetR, fpxR, fntcR, opR, drxR, opR, drxR)
ganhador <- c(1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1)
jogos <- data.frame(time1, time2, ganhador)
View(jogos)
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos da competição CHAMPIONS
#The Guard
tg = c('valyn', 'Sayaplayer', 'JonahP', 'neT', 'trent') # Definindo o time 1
tg <- paste0('\\b', tg, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$tg <- ifelse(grepl(paste(tg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FaZe Clan
fzc = c('supamen', 'POISED', 'dicey', 'BABYBAY', 'flyuh')
fzc <- paste0('\\b', fzc, '\\b')
dados_gerais$fzc <- ifelse(grepl(paste(fzc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#cl9
cl9 = c('mitch', 'curry', 'leaf', 'vanity', 'Xeppaa')
cl9 <- paste0('\\b', cl9, '\\b')
dados_gerais$cl9 <- ifelse(grepl(paste(cl9, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#sr
sr = c('TiGG', 'bdog', 'dazzLe', 'mada', 'moose')
sr <- paste0('\\b', sr, '\\b')
dados_gerais$sr <- ifelse(grepl(paste(sr, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#t100
t100 = c('Asuna', 'stellar', 'Will', 'Derrek', 'bang')
t100 <- paste0('\\b', t100, '\\b')
dados_gerais$t100 <- ifelse(grepl(paste(t100, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Evil Geniuses
eg = c('Boostio', 'C0M', 'Reformed', 'jawgemo', 'Apoth')
eg <- paste0('\\b', eg, '\\b')
dados_gerais$eg <- ifelse(grepl(paste(eg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Sentinels
sen = c('TenZ', 'ShahZaM', 'shroud', 'dapr', 'Zellsis')
sen <- paste0('\\b', sen, '\\b')
dados_gerais$sen <- ifelse(grepl(paste(sen, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#NRG Esports
nrg = c('hazed', 'eeiu', 'tex', 's0m', 'Ethan')
nrg <- paste0('\\b', nrg, '\\b')
dados_gerais$nrg <- ifelse(grepl(paste(nrg, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$tg == 1 | dados_gerais$fzc == 1 | dados_gerais$cl9 == 1
| dados_gerais$sr == 1 | dados_gerais$t100 == 1 | dados_gerais$eg == 1 |
dados_gerais$sen == 1 | dados_gerais$nrg == 1)
View(resultado)
dados_gerais['leaf.1',]$cl9 <- 0
View(dados_gerais)
resultado <- filter(dados_gerais, dados_gerais$tg == 1 | dados_gerais$fzc == 1 | dados_gerais$cl9 == 1
| dados_gerais$sr == 1 | dados_gerais$t100 == 1 | dados_gerais$eg == 1 |
dados_gerais$sen == 1 | dados_gerais$nrg == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Separando os times em dataframes
tg_df <- filter(resultado, resultado$tg == 1)
fzc_df <- filter(resultado, resultado$fzc == 1)
cl9_df <- filter(resultado, resultado$cl9 == 1)
sr_df <- filter(resultado, resultado$sr == 1)
t100_df <- filter(resultado, resultado$t100 == 1)
eg_df <- filter(resultado, resultado$eg == 1)
sen_df <- filter(resultado, resultado$sen == 1)
nrg_df <- filter(resultado, resultado$nrg == 1)
rm(tg, fzc, cl9, sr, t100, eg, sen, nrg)
# Tirando colunas de times dos dataframes especificos de cada time
tg_df <- tg_df[,-6:-13]
nrg_df <- nrg_df[,-6:-13]
sr_df <- sr_df[,-6:-13]
cl9_df <- cl9_df[,-6:-13]
eg_df <- eg_df[,-6:-13]
fzc_df <- fzc_df[,-6:-13]
t100_df <- t100_df[,-6:-13]
sen_df <- sen_df[,-6:-13]
#
cl9R <- mean(cl9_df$R)
egR <- mean(eg_df$R)
fzcR <- mean(fzc_df$R)
srR <- mean(sr_df$R)
senR <- mean(sen_df$R)
t100R <- mean(t100_df$R)
tgR <- mean(tg_df$R)
nrgR <- mean(nrg_df$R)
time1 <- c(tgR, srR, fzcR, nrgR, senR, egR, tgR, fzcR, t100R, cl9R, tgR, t100R, tgR, fzcR)
time2 <- c(senR, cl9R, egR, t100R, srR, nrgR, cl9R, t100R, senR, nrgR, fzcR, cl9R, t100R, t100R)
ganhador <- c(1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2)
jogos <- data.frame(time1, time2, ganhador)
rm(cl9R, egR, fzcR, srR, senR, t100R, tgR, nrgR, time1, time2, ganhador)
View(jogos)
View(jogos)
write.csv2(jogos, 'jogos4.csv')
rm(list = ls())
# União dos dataframes -------------------------------------------------------------------------------------
jogos1 <- read.csv2('jogos.csv') %>% select(-X)
jogos2 <- read.csv2('jogos2.csv') %>% select(-X)
jogos3 <- read.csv2('jogos3.csv') %>% select(-X)
jogos4 <- read.csv2('jogos4.csv') %>% select(-X)
jogos <- rbind(jogos1, jogos2, jogos3)
jogos <- rbind(jogos1, jogos2, jogos3, jogos4)
View(jogos)
jogos$ganhador <- as.factor(jogos$ganhador)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
nteste <- neuralnet(ganhador == 1 ~ time1 + time2, jogos, hidden = 10, threshold = 0.01)
plot(nteste, rep = 1)
rm(nteste)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 10,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop0',
stepmax = 10000)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 10000)
# União dos dataframes -------------------------------------------------------------------------------------
jogos1 <- read.csv2('jogos.csv') %>% select(-X)
jogos2 <- read.csv2('jogos2.csv') %>% select(-X)
jogos3 <- read.csv2('jogos3.csv') %>% select(-X)
jogos4 <- read.csv2('jogos4.csv') %>% select(-X)
jogos <- rbind(jogos1, jogos2, jogos3, jogos4)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(time1 + time2 ~ ganhador,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 1 ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
threshold = 0.05,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop+',
stepmax = 10000)
