jogos <- read.csv2('csv/jogos.csv') %>% dplyr::select(-X)
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(13)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = F,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = F,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'backprop',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
learningrate = 0.9,
rep = 10,
algorithm = 'backprop',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
learningrate = 0.1,
rep = 10,
algorithm = 'backprop',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'slr',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "ce",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'slr',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "ce",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "ce",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 8,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
?err.fct
?neuralnet
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 7,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
n <- neuralnet(ganhador == 2 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 7,
err.fct = "sse",
linear.output = T,
threshold = 0.03,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 7,
err.fct = "sse",
linear.output = T,
threshold = 0.03,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 7,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
nn1 <- ifelse(n$net.result[[1]]>0.5,0,1)
View(training_data)
nn1 <- ifelse(n$net.result[[1]]>0.5,1,0)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
View(OutPutVsPred)
OutPutVsPred$V1 <- gsub(2, 0, OutPutVsPred$V1)
View(OutPutVsPred)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
View(OutPutVsPred)
Predict = compute(n, test_data)
Predict$net.result
View(test_data)
nn2 <- ifelse(Predict$net.result[[1]]>0.5,1,0)
nn2 <- ifelse(Predict$net.result[[,1]]>0.5,1,0)
nn2 <- ifelse(Predict$net.result>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
View(predictVstest)
predictVstest <- cbind(test_data, nn2)
View(predictVstest)
count(predictVstest$ganhador == predictVstest)
count(predictVstest$ganhador == predictVstest$nn2)
sum(predictVstest$ganhador == predictVstest$nn2)
View(predictVstest)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 7,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n$result.matrix
n$net.result[[1]]
nn1 <- ifelse(n$net.result[[1]]>0.5,1,0)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result>0.5,1,0)
hist(Predict$net.result, breaks = 50, xlim = range(-0.5:2))
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, nn2)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, nn2)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = 7,
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n$net.result[[1]]
nn1 <- ifelse(n$net.result[[1]]>0.5,1,0)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, nn2)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'slr',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.04,
lifesign = 'minimal',
rep = 10,
algorithm = 'slr',
stepmax = 10000)
plot(n, rep = 3)
n$net.result[[1]]
nn1 <- ifelse(n$net.result[[1]]>0.5,1,0)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, nn2)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'slr',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'sag',
stepmax = 10000)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.04,
lifesign = 'minimal',
rep = 10,
algorithm = 'sag',
stepmax = 10000)
plot(n, rep = 3)
# Carregando o dataframe -----------------------------------------------------------------------------------
jogos <- read.csv2('csv/jogos.csv') %>% dplyr::select(-X)
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(13)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.04,
lifesign = 'minimal',
rep = 10,
algorithm = 'sag',
stepmax = 10000)
plot(n, rep = 3)
n$net.result[[1]]
nn1 <- ifelse(n$net.result[[1]]>0.5,1,0)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, nn2)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.04,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
View(jogos)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(13)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.04,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
n$net.result[[1]]
nn1 <- ifelse(n$net.result[[1]]>0.5,1,0)
misClassificationError = mean(training_data$ganhador != nn1)
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
Predict = compute(n, test_data)
View(OutPutVsPred)
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result>0.5,1,0)
predictVstest <- cbind(test_data, Predict$net.result)
predictVstest <- cbind(test_data, nn2)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
Predict = compute(n, test_data)
Predict$net.result
nn2 <- ifelse(Predict$net.result[,1]>0.5,1,0)
nn3 <- ifelse(Predict$net.result[,2]>0.5,1,0)
nn4 <- cbind(nn2, nn3)
z <- cbind(nn2, nn3)
z <- as.data.frame(cbind(nn2, nn3))
View(z)
predictVstest <- cbind(test_data, z)
View(predictVstest)
sum(predictVstest$ganhador == predictVstest$nn2) / 22
OutPutVsPred <- as.data.frame(cbind(training_data$ganhador, nn1))
View(OutPutVsPred)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
Predict$net.result
