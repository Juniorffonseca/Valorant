jogos <- read.csv2('csv/jogos.csv') %>% dplyr::select(-X)
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.02,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.03,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.09,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(20,20),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 3)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.005,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 10000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop+',
stepmax = 100000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1KAST + time2KAST + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
View(jogos)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.001,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
plot(n, rep = 1)
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 10,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 3,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(15)
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/31
library(keras)
use_session_with_seed(42)
library(keras)
use_session_with_seed(42)
Y
library(keras)
use_session_with_seed(42)
library(tensorflow)
tensorflow::set_random_seed(42)
py_config()
install.packages("reticulate")
install.packages("reticulate")
repl_python()
tensorflow::set_random_seed(42)
reticulate::install_miniconda(force = TRUE)
remotes::install_github("rstudio/reticulate")
remotes::install_github("rstudio/reticulate")
remotes::install_github("rstudio/reticulate")
dev_mode(on = NULL, path = getOption("devtools.path"))
dev_mode(on = NULL, path = getOption("devtools.path"))
?dev_mode
??dev_mode
devtools::dev_mode(on = NULL, path = getOption("devtools.path"))
reticulate:::rm_all_reticulate_state()
tensorflow::set_random_seed(42)
Y
