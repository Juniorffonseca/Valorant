previsao$net.result
# Link da partida ------------------------------------------------------------------------------------------
url <- "https://www.vlr.gg/163347/where-is-fullerton-vs-kitten-shelter-nerd-street-valorant-lockdown-open-3-gf"
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, partida, url)
# Time A
#timeA = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['nobody.1',]$timeA <- 0
dados_gerais['Laz.1',]$timeA <- 0
# Time B
#timeB = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['Shiro.1',]$timeB<- 0
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
View(timeB_df)
View(timeB_df)
# Link da partida ------------------------------------------------------------------------------------------
url <- "https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf"
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, partida, url)
# Time A
#timeA = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['nobody.1',]$timeA <- 0
dados_gerais['Laz.1',]$timeA <- 0
# Time B
#timeB = c('nome1', 'nome2', 'nome3', 'nome4', 'nome5') # se preferir passar de forma manual
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
dados_gerais['Shiro.1',]$timeB<- 0
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
install.packages('rsconnect')
rsconnect::setAccountInfo(name='jrff',
token='5B5F335AEC55EA1AB197416456A825FB',
secret='xFdlpeyr3q2zbnI1p8/MJp+iQKqfOmpYRheuTaf1')
library(rsconnect)
rsconnect::deployApp('/')
library(rsconnect)
rsconnect::deployApp('\Users\anonb\Documents\TCC Pós\Scripts')
library(rsconnect)
rsconnect::deployApp('/Users/anonb/Documents/TCC Pós/Scripts')
library(rsconnect)
rsconnect::deployApp('\Users\anonb\Documents\TCC Pós\Scripts')
library(rsconnect)
rsconnect::deployApp('/Users/anonb/Documents/TCC Pós/Scripts')
# Pacotes
library(shiny)
library(shinythemes)
install.packages(shinythemes)
install.packages('shinythemes)
install.packages('shinythemes')
library(shinythemes)
ui <- fluidPage(theme = shinytheme('cerulean'),
navbarPage(
# theme = 'cerulean
"Teste",
tabPanel("Navbar 1",
sidebarPanel(
tags$h3("Input:"),
textInput('txt', 'link da partida')
))
))
rsconnect::deployApp('/Users/anonb/Documents/TCC Pós/Scripts')
source("~/TCC Pós/Scripts/server.R")
ui <- fluidPage(theme = shinytheme('cerulean'),
navbarPage(
# theme = 'cerulean
"Teste",
tabPanel("Navbar 1",
sidebarPanel(
tags$h3("Input:"),
textInput('txt', 'link da partida')
))
))
# Create Shiny object
shinyApp(ui = ui, server = server)
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"My first app",
tabPanel("Navbar 1",
sidebarPanel(
tags$h3("Input:"),
textInput("txt1", "Given Name:", ""),
textInput("txt2", "Surname:", ""),
), # sidebarPanel
mainPanel(
h1("Header 1"),
h4("Output 1"),
verbatimTextOutput("txtout"),
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "This panel is intentionally left blank"),
tabPanel("Navbar 3", "This panel is intentionally left blank")
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
rsconnect::deployApp('/Users/anonb/Documents/TCC Pós/Scripts')
runApp()
paste(previsao$net.result)
runApp()
runApp()
runApp()
rsconnect::deployApp('/Users/anonb/Documents/TCC Pós/Scripts')
T
rsconnect::deployApp('/Users/anonb/Documents/TCC Pós/Scripts')
source("/04_previsão.R")
source("./04_previsão.R")
?source
runApp()
runApp()
?function
load(file = "model_nnet.rda")
preverResultado <- function (url){
load(file = "model_nnet.rda")
dados_gerais <- read.csv2('csv/jogadores.csv')
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, partida, url)
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
return(previsao$net.result)
}
preverResultado(https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf)
preverResultado("https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf")
preverResultado("https://www.vlr.gg/163379/bleed-vs-boom-esports-penta-pro-series-gf")
preverResultado <- function (url){
load(file = "model_nnet.rda")
dados_gerais <- read.csv2('csv/jogadores.csv')
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, url)
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
return(previsao$net.result)
}
preverResultado(input, output)
runApp()
preverResultado(input)
preverResultado(textInput)
source("./04_previsão.R")
preverResultado(textInput)
shinyServer(preverResultado(textInput))
?textInput
shinyServer(preverResultado(textInput$1))
shinyServer(preverResultado(input$1))
?reactive
input$1
input$'teste'
?inputid
input$teste
input$teste
preverResultado(textInput$url)
preverResultado(input$url)
preverResultado(input$url)
preverResultado(input$'url')
url$content <- as.character(url$schedule.item.type)
urll$content <- as.character(urll$schedule.item.type)
input$url
runApp()
inputPanel
?inputPanel
preverResultado(input$url)
preverResultado(input$txt1)
?output
??output
input$url <- reactive({})
output$txtout <- renderText({
paste(previsao$net.result, sep = " " )
})
# Pacotes
library(shiny)
library(shinythemes)
output$txtout <- renderText({
paste(previsao$net.result, sep = " " )
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
preverResultado(data$url)
runApp()
?renderPrint
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
# Pacotes
library(shiny)
library(shinythemes)
source("./04_previsão.R")
runApp()
input$url
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("04_previsão.R")
runApp()
source("C:\Users\anonb\Documents\TCC Pós\Scripts'\04_previsão.R")
source("C:/Users\anonb\Documents\TCC Pós\Scripts'\04_previsão.R")
source("C:/Users/anonb/Documents/TCC Pós/Scripts/04_previsão.R")
runApp()
source("04_previsão.R")
runApp()
runApp()
source('04_previsão.R')
runApp()
# Pacotes
library(shiny)
library(shinythemes)
source('04_previsão.R')
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"Valorant Prediction",
tabPanel("Prediction",
sidebarPanel(
tags$h3("Analisar partidas"),
textInput("url", "Url da partida:", ""),
), # sidebarPanel
mainPanel(
h1("Resultado"),
h4("Probabilidade de vitória do Time1"),
verbatimTextOutput("txtout"),
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "Em breve mais funções"),
tabPanel("Navbar 3", "Em breve mais funções")
) # navbarPage
) # fluidPage
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
runApp()
runApp()
runApp()
runApp()
runApp()
View(dados_gerais)
#
dados_gerais <- read.csv2('csv/jogadores.csv')
runApp()
runApp()
runApp()
View(dados_gerais)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
info <- read_html(as.string(url)) %>%
html_nodes("table") %>%
html_table()
info <- read_html(as.String(url)) %>%
html_nodes("table") %>%
html_table()
info <- read_html(to.string(url)) %>%
html_nodes("table") %>%
html_table()
?toString
info <- read_html(to.String(url)) %>%
html_nodes("table") %>%
html_table()
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
info <- read_html(input$url) %>%
html_nodes("table") %>%
html_table()
runApp()
info <- read_html(paste(url)) %>%
html_nodes("table") %>%
html_table()
runApp()
