url_xset <- "https://www.vlr.gg/team/stats/533/xset/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_adversarios_xset <- read_html(url_xset) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_adversarios_xset)[9] <- 'RW ATK'
names(ds_adversarios_xset)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_adversarios_xset <- select(ds_adversarios_xset, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
ds_adversarios_xset[-1] <- lapply(ds_adversarios_xset[-1], str_replace_all, "\t", ' ')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_adversarios_xset <- subset(ds_adversarios_xset, nchar(gsub("[^a-z]", "", ds_adversarios_xset$`Map (#)`)) < 1)
ds_adversarios_xset[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_xset$`WIN%`, '\n', 2)
ds_adversarios_xset[c('Adversario', 'Resultado')] <- str_split_fixed(
ds_adversarios_xset$Resultado, '\n\n\n', 2)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_adversarios_xset[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_xset$`WIN%`, ' ', 2)
# Selecionando apenas Data, Resultado e Adversario para o nosso dataframe ---------------------------------
ds_adversarios_xset <- select(ds_adversarios_xset, 'Data', 'Resultado', 'Adversario')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_adversarios_xset$Data <- as_date(ds_adversarios_xset$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_adversarios_xset$Resultado <- gsub("[^0-9/ .-]", "", ds_adversarios_xset$Resultado)# Deixando apenas números e "/"
#
ds_adversarios_xset$Resultado <- substr(ds_adversarios_xset$Resultado,
gregexpr("/", ds_adversarios_xset$Resultado)[[1]][1] - 3,
gregexpr("/", ds_adversarios_xset$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_adversarios_xset <- separate(ds_adversarios_xset, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_adversarios_xset$RL <- sub(" .*", "", ds_adversarios_xset$RL) # Tirando todos os caracteres que estavam à direita
ds_adversarios_xset$RW <- sub("*. ", "", ds_adversarios_xset$RW) # Tirando todos os caracteres que estavam à esquerda
ds_adversarios_xset$RW <- sub(" ", "", ds_adversarios_xset$RW) # Tirando todos os espaços
ds_adversarios_xset$RL <- sub(" ", "", ds_adversarios_xset$RL) # Tirando todos os espaços
ds_adversarios_xset$Resultados <- as.numeric(ds_adversarios_xset$RW) > as.numeric(ds_adversarios_xset$RL) # Criando uma coluna de resultados
ds_adversarios_xset$Resultados <- replace(ds_adversarios_xset$Resultados, ds_adversarios_xset$Resultados == TRUE, 'Win') %>%
replace(ds_adversarios_xset$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
# Limpando a coluna 'Adversario' --------------------------------------------------------------------------
ds_adversarios_xset[-1] <- lapply(ds_adversarios_xset[-1], str_replace_all, "\\s", ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ')
ds_adversarios_xset[-1] <- lapply(ds_adversarios_xset[-1], str_replace_all, "  ", '')
View(ds_adversarios_xset)
View(ds_adversarios_xset)
# Exportando o arquivo
write.csv(ds_adversarios_xset, file = "C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_xset.csv")
# Urls ----------------------------------------------------------------------------------------------------
url_lev <- "https://www.vlr.gg/team/stats/2359/leviat-n/"
# Pegando os dados dos times no url e transformando em dataframe ------------------------------------------
ds_adversarios_lev <- read_html(url_lev) %>%
html_node('table') %>%
html_table
# Renomeando as colunas 9 e 10 para tirar a ambiguidade que havia no dataframe que veio do site -----------
names(ds_adversarios_lev)[9] <- 'RW ATK'
names(ds_adversarios_lev)[10] <- 'RL ATK'
# Removendo duas colunas que não serão usadas -------------------------------------------------------------
ds_adversarios_lev <- select(ds_adversarios_lev, -Expand) %>%
select( -'Agent Compositions')
# Tirando todos os caracteres '\n e \t' do dataframe com a função lapply ----------------------------------
ds_adversarios_lev[-1] <- lapply(ds_adversarios_lev[-1], str_replace_all, "\t", ' ')
# Retirando as linhas que contem 1 ou mais caracterer na coluna Map ---------------------------------------
ds_adversarios_lev <- subset(ds_adversarios_lev, nchar(gsub("[^a-z]", "", ds_adversarios_lev$`Map (#)`)) < 1)
ds_adversarios_lev[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_lev$`WIN%`, '\n', 2)
ds_adversarios_lev[c('Adversario', 'Resultado')] <- str_split_fixed(
ds_adversarios_lev$Resultado, '\n\n\n', 2)
# Separando os conteúdos das linhas em duas novas colunas de Data e Resultado -----------------------------
ds_adversarios_lev[c('Data', 'Resultado')] <- str_split_fixed(
ds_adversarios_lev$`WIN%`, ' ', 2)
# Selecionando apenas Data, Resultado e Adversario para o nosso dataframe ---------------------------------
ds_adversarios_lev <- select(ds_adversarios_lev, 'Data', 'Resultado', 'Adversario')
# Passando os dados da coluna Data para o formato de data -------------------------------------------------
ds_adversarios_lev$Data <- as_date(ds_adversarios_lev$Data)
# Limpando os dados para deixar apenas os resultados------------------------------------------------------
ds_adversarios_lev$Resultado <- gsub("[^0-9/ .-]", "", ds_adversarios_lev$Resultado)# Deixando apenas números e "/"
#
ds_adversarios_lev$Resultado <- substr(ds_adversarios_lev$Resultado,
gregexpr("/", ds_adversarios_lev$Resultado)[[1]][1] - 3,
gregexpr("/", ds_adversarios_lev$Resultado)[[3]][1] + 3) # Tirando dados que estão longes das barras ("/")
ds_adversarios_lev <- separate(ds_adversarios_lev, Resultado, c("RW", "RL"), "/") # Transformando a coluna Resultado em RW e RL
ds_adversarios_lev$RL <- sub(" .*", "", ds_adversarios_lev$RL) # Tirando todos os caracteres que estavam à direita
ds_adversarios_lev$RW <- sub("*. ", "", ds_adversarios_lev$RW) # Tirando todos os caracteres que estavam à esquerda
ds_adversarios_lev$RW <- sub(" ", "", ds_adversarios_lev$RW) # Tirando todos os espaços
ds_adversarios_lev$RL <- sub(" ", "", ds_adversarios_lev$RL) # Tirando todos os espaços
ds_adversarios_lev$Resultados <- as.numeric(ds_adversarios_lev$RW) > as.numeric(ds_adversarios_lev$RL) # Criando uma coluna de resultados
ds_adversarios_lev$Resultados <- replace(ds_adversarios_lev$Resultados, ds_adversarios_lev$Resultados == TRUE, 'Win') %>%
replace(ds_adversarios_lev$Resultados == FALSE, 'Lose') # Renomeando TRUE para 'Win' e FALSE para 'Lose'
# Limpando a coluna 'Adversario' --------------------------------------------------------------------------
ds_adversarios_lev[-1] <- lapply(ds_adversarios_lev[-1], str_replace_all, "\\s", ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ') %>%
lapply(str_replace_all, '  ', ' ') %>%
lapply(str_replace_all, '   ', ' ')
ds_adversarios_lev[-1] <- lapply(ds_adversarios_lev[-1], str_replace_all, "  ", '')
# Exportando o arquivo
write.csv(ds_adversarios_lev, file = "C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_lev.csv")
ds_adversarios_fpx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_fpx.csv",
sep = ',') %>% select(-X)
View(ds_adversarios_fpx)
ds_adversarios_drx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_drx.csv",
sep = ',') %>% select(-X)
ds_adversarios_loud <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_loud.csv",
sep = ',') %>% select(-X)
ds_adversarios_lev <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_xset.csv",
sep = ',') %>% select(-X)
View(ds_adversarios_drx)
#Drx
drx_fpx <- sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Lose')
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('dados_gerais.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- dados_gerais[,-1]
dados_gerais <- dados_gerais[,-2]
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dados_gerais[,-1]
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
resultado <- resultado[-41,]
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
idc_t1 <- ineq(loud_df$KAST, type = 'Gini')
idc_t2 <- ineq(op_df$KAST, type = 'Gini')
idc_t3 <- ineq(drx_df$KAST, type = 'Gini')
idc_t4 <- ineq(xset_df$KAST, type = 'Gini')
idc_t5 <- ineq(tl_df$KAST, type = 'Gini')
idc_t6 <- ineq(lev_df$KAST, type = 'Gini')
idc_t7 <- ineq(fpx_df$KAST, type = 'Gini')
idc_t8 <- ineq(fntc_df$KAST, type = 'Gini')
# Colocando o indice de Gini em cada jogador para seu respectivo time
loud_df$idc <- idc_t1
op_df$idc <- idc_t2
drx_df$idc <- idc_t3
xset_df$idc <- idc_t4
tl_df$idc <- idc_t5
lev_df$idc <- idc_t6
fpx_df$idc <- idc_t7
fntc_df$idc <- idc_t8
# Removendo as variaveis idc_tn e times
rm(idc_t1, idc_t2, idc_t3, idc_t4, idc_t5, idc_t6, idc_t7, idc_t8)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-7:-14]
fntc_df <- fntc_df[,-7:-14]
xset_df <- xset_df[,-7:-14]
drx_df <- drx_df[,-7:-14]
lev_df <- lev_df[,-7:-14]
op_df <- op_df[,-7:-14]
tl_df <- tl_df[,-7:-14]
fpx_df <- fpx_df[,-7:-14]
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R)
medialev <- mean(lev_df$R)
mediaxset <- mean(xset_df$R)
mediafpx <- mean(fpx_df$R)
mediadrx <- mean(drx_df$R)
mediaop <- mean(op_df$R)
mediafntc <- mean(fntc_df$R)
mediatl <- mean(tl_df$R)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('dados_gerais.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- dados_gerais[,-1]
dados_gerais <- dados_gerais[,-2]
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dados_gerais[,-1]
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
resultado <- resultado[-41,]
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
idc_t1 <- ineq(loud_df$KAST, type = 'Gini')
idc_t2 <- ineq(op_df$KAST, type = 'Gini')
idc_t3 <- ineq(drx_df$KAST, type = 'Gini')
idc_t4 <- ineq(xset_df$KAST, type = 'Gini')
idc_t5 <- ineq(tl_df$KAST, type = 'Gini')
idc_t6 <- ineq(lev_df$KAST, type = 'Gini')
idc_t7 <- ineq(fpx_df$KAST, type = 'Gini')
idc_t8 <- ineq(fntc_df$KAST, type = 'Gini')
# Colocando o indice de Gini em cada jogador para seu respectivo time
loud_df$idc <- idc_t1
op_df$idc <- idc_t2
drx_df$idc <- idc_t3
xset_df$idc <- idc_t4
tl_df$idc <- idc_t5
lev_df$idc <- idc_t6
fpx_df$idc <- idc_t7
fntc_df$idc <- idc_t8
# Removendo as variaveis idc_tn e times
rm(idc_t1, idc_t2, idc_t3, idc_t4, idc_t5, idc_t6, idc_t7, idc_t8)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-7:-14]
fntc_df <- fntc_df[,-7:-14]
xset_df <- xset_df[,-7:-14]
drx_df <- drx_df[,-7:-14]
lev_df <- lev_df[,-7:-14]
op_df <- op_df[,-7:-14]
tl_df <- tl_df[,-7:-14]
fpx_df <- fpx_df[,-7:-14]
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
medialoud <- mean(loud_df$R)
medialev <- mean(lev_df$R)
mediaxset <- mean(xset_df$R)
mediafpx <- mean(fpx_df$R)
mediadrx <- mean(drx_df$R)
mediaop <- mean(op_df$R)
mediafntc <- mean(fntc_df$R)
mediatl <- mean(tl_df$R)
# Carregando pacotes ---------------------------------------------------------------------------------------
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('dados_gerais.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- dados_gerais[,-1]
dados_gerais <- dados_gerais[,-2]
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dados_gerais[,-1]
# Definindo times especificos ---------------------------------------------------------------------------
#Loud
loud = c('Sacy', 'pancada', 'saadhak', 'Less', 'aspas') # Definindo o time 1
loud <- paste0('\\b', loud, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$loud <- ifelse(grepl(paste(loud, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#OpTic Gaming
op = c('crashies', 'Victor', 'Marved', 'FNS', 'yay')
op <- paste0('\\b', op, '\\b')
dados_gerais$op <- ifelse(grepl(paste(op, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#DRX
drx = c('stax', 'Rb', 'Zest', 'BuZz', 'MaKo')
drx <- paste0('\\b', drx, '\\b')
dados_gerais$drx <- ifelse(grepl(paste(drx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#XSET
xset = c('AYRIN', 'BcJ', 'dephh', 'zekken', 'Cryocells')
xset <- paste0('\\b', xset, '\\b')
dados_gerais$xset <- ifelse(grepl(paste(xset, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TL
tl = c('ScreaM', 'soulcas', 'dimasick', 'Jamppi', 'Nivera')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Leviatan
lev = c('Melser', 'adverso', 'Tacolilla', 'kiNgg', 'Shyy')
lev <- paste0('\\b', lev, '\\b')
dados_gerais$lev <- ifelse(grepl(paste(lev, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#FunPlus Phoenix
fpx = c('Zyppan', 'ardiis', 'ANGE1', 'Shao', 'SUYGETSU')
fpx <- paste0('\\b', fpx, '\\b')
dados_gerais$fpx <- ifelse(grepl(paste(fpx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FNATIC
fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
resultado <- resultado[-41,]
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
idc_t1 <- ineq(loud_df$KAST, type = 'Gini')
idc_t2 <- ineq(op_df$KAST, type = 'Gini')
idc_t3 <- ineq(drx_df$KAST, type = 'Gini')
idc_t4 <- ineq(xset_df$KAST, type = 'Gini')
idc_t5 <- ineq(tl_df$KAST, type = 'Gini')
idc_t6 <- ineq(lev_df$KAST, type = 'Gini')
idc_t7 <- ineq(fpx_df$KAST, type = 'Gini')
idc_t8 <- ineq(fntc_df$KAST, type = 'Gini')
# Colocando o indice de Gini em cada jogador para seu respectivo time
loud_df$idc <- idc_t1
op_df$idc <- idc_t2
drx_df$idc <- idc_t3
xset_df$idc <- idc_t4
tl_df$idc <- idc_t5
lev_df$idc <- idc_t6
fpx_df$idc <- idc_t7
fntc_df$idc <- idc_t8
# Removendo as variaveis idc_tn e times
rm(idc_t1, idc_t2, idc_t3, idc_t4, idc_t5, idc_t6, idc_t7, idc_t8)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-7:-14]
fntc_df <- fntc_df[,-7:-14]
xset_df <- xset_df[,-7:-14]
drx_df <- drx_df[,-7:-14]
lev_df <- lev_df[,-7:-14]
op_df <- op_df[,-7:-14]
tl_df <- tl_df[,-7:-14]
fpx_df <- fpx_df[,-7:-14]
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 -----------------------
# Tentando mesclar dataframe ds_adversarios com outras estatisticas ------------------------------------------------
ds_adversarios_loud <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_loud.csv",
sep = ',') %>% select(-X)
ds_adversarios_drx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_drx.csv",
sep = ',') %>% select(-X)
ds_adversarios_fpx <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_fpx.csv",
sep = ',') %>% select(-X)
ds_adversarios_fntc <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_fntc.csv",
sep = ',') %>% select(-X)
ds_adversarios_tl <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_tl.csv",
sep = ',') %>% select(-X)
ds_adversarios_op <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_op.csv",
sep = ',') %>% select(-X)
ds_adversarios_xset <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_xset.csv",
sep = ',') %>% select(-X)
ds_adversarios_lev <- read.csv("C:/Users/anonb/Documents/TCC Pós/Scripts/scripts_times/ds_adversarios_xset.csv",
sep = ',') %>% select(-X)
View(ds_adversarios_drx)
drx_loud <- sum(ds_adversarios_drx$Adversario == 'Loud' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'Loud' & ds_adversarios_drx$Resultados == 'Lose')
drx_loud <- sum(ds_adversarios_drx$Adversario == 'LOUD' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'LOUD' & ds_adversarios_drx$Resultados == 'Lose')
drx_op <- sum(ds_adversarios_drx$Adversario == 'OpTic Gaming')
drx_op <- sum(ds_adversarios_drx$Adversario == 'OpTic Gaming' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'OpTic Gaming' & ds_adversarios_drx$Resultados == 'Lose')
#Loud
loud_lev <- sum(ds_adversarios_loud$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Lose')
loud_drx <- sum(ds_adversarios_loud$Adversario == 'DRX' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios_loud$Adversario == 'DRX' & ds_adversarios_loud$Resultados == 'Lose')
loud_op <- sum(ds_adversarios_loud$Adversario == 'OpTic Gaming' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios_loud$Adversario == 'OpTic Gaming' & ds_adversarios_loud$Resultados == 'Lose')
#Drx
drx_fpx <- sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'FunPlus Phoenix' & ds_adversarios_drx$Resultados == 'Lose')
drx_loud <- sum(ds_adversarios_drx$Adversario == 'LOUD' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'LOUD' & ds_adversarios_drx$Resultados == 'Lose')
drx_fntc <- sum(ds_adversarios_drx$Adversario == 'FNATIC' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'FNATIC' & ds_adversarios_drx$Resultados == 'Lose')
drx_op <- sum(ds_adversarios_drx$Adversario == 'OpTic Gaming' & ds_adversarios_drx$Resultados == 'Win') -
sum(ds_adversarios_drx$Adversario == 'OpTic Gaming' & ds_adversarios_drx$Resultados == 'Lose')
# Tentando uma formula para dizer a porcentagem de chance de vitória do time 1 sobre o time 2 ----------------------
medialoud <- mean(loud_df$R)
jogo1 <- mediadrx / (mediadrx + mediafpx)
mediadrx <- mean(drx_df$R)
mediafpx <- mean(fpx_df$R)
3*0,1
3*0.1
-drx_fpx
jogo1 <- (mean(drx_df$R) + drx_fpx * 0.01) / ((mean(drx_df$R) + drx_fpx * 0.01) + (mean(fpx_df$R) + (-drx_fpx)))
jogo1 <- (mean(drx_df$R) + drx_fpx * 0.01) / ((mean(drx_df$R) + drx_fpx * 0.01) + (mean(fpx_df$R) + (-drx_fpx * 0.01)))
-loud_lev * 0.01
(-loud_lev * 0.01)
loud_lev
#Loud
loud_lev <- sum(ds_adversarios_loud$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Lose')
#Loud
loud_lev <- sum(ds_adversarios_loud$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Win') -
sum(ds_adversarios_loud$Adversario == 'Leviatán' & ds_adversarios_loud$Resultados == 'Lose')
-loud_lev * 0.01
loud_lev * 0.01
(mean(lev_df$R) + -loud_lev * 0.01
)
jogo2 <- (mean(lev_df$R) + -loud_lev * 0.01) / ((mean(lev_df$R) + -loud_lev * 0.01) +
mean(loud_df$R) + (loud_lev * 0.01))
View(ds_adversarios_op)
#OpTic
op_tl <- sum(ds_adversarios_op$Adversario == 'Team Liquid' & ds_adversarios_op$Resultados == 'Win') -
sum(ds_adversarios_op$Adversario == 'Team Liquid' & ds_adverarios_op$Resultados == 'Lose')
#OpTic
op_tl <- sum(ds_adversarios_op$Adversario == 'Team Liquid' & ds_adversarios_op$Resultados == 'Win') -
sum(ds_adversarios_op$Adversario == 'Team Liquid' & ds_adversarios_op$Resultados == 'Lose')
jogo3 <- (mean(op_df$R) + op_tl * 0.01) / ((mean(op_df$R) + op_tl * 0.01) +
mean(tl_df$R) + -op_tl * 0.01)
