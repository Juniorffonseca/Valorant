load(file = "model_nnet.rda")
dados_gerais <- read.csv2('csv/jogadores.csv')
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, url)
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
return(previsao$net.result)
}
preverResultado(input, output)
runApp()
preverResultado(input)
preverResultado(textInput)
source("./04_previsão.R")
preverResultado(textInput)
shinyServer(preverResultado(textInput))
?textInput
shinyServer(preverResultado(textInput$1))
shinyServer(preverResultado(input$1))
?reactive
input$1
input$'teste'
?inputid
input$teste
input$teste
preverResultado(textInput$url)
preverResultado(input$url)
preverResultado(input$url)
preverResultado(input$'url')
url$content <- as.character(url$schedule.item.type)
urll$content <- as.character(urll$schedule.item.type)
input$url
runApp()
inputPanel
?inputPanel
preverResultado(input$url)
preverResultado(input$txt1)
?output
??output
input$url <- reactive({})
output$txtout <- renderText({
paste(previsao$net.result, sep = " " )
})
# Pacotes
library(shiny)
library(shinythemes)
output$txtout <- renderText({
paste(previsao$net.result, sep = " " )
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
preverResultado(data$url)
runApp()
?renderPrint
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
# Pacotes
library(shiny)
library(shinythemes)
source("./04_previsão.R")
runApp()
input$url
runApp()
?verbatimTextOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("04_previsão.R")
runApp()
source("C:\Users\anonb\Documents\TCC Pós\Scripts'\04_previsão.R")
source("C:/Users\anonb\Documents\TCC Pós\Scripts'\04_previsão.R")
source("C:/Users/anonb/Documents/TCC Pós/Scripts/04_previsão.R")
runApp()
source("04_previsão.R")
runApp()
runApp()
source('04_previsão.R')
runApp()
# Pacotes
library(shiny)
library(shinythemes)
source('04_previsão.R')
# Define UI
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage(
# theme = "cerulean",  # <--- To use a theme, uncomment this
"Valorant Prediction",
tabPanel("Prediction",
sidebarPanel(
tags$h3("Analisar partidas"),
textInput("url", "Url da partida:", ""),
), # sidebarPanel
mainPanel(
h1("Resultado"),
h4("Probabilidade de vitória do Time1"),
verbatimTextOutput("txtout"),
) # mainPanel
), # Navbar 1, tabPanel
tabPanel("Navbar 2", "Em breve mais funções"),
tabPanel("Navbar 3", "Em breve mais funções")
) # navbarPage
) # fluidPage
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
runApp()
runApp()
runApp()
runApp()
runApp()
View(dados_gerais)
#
dados_gerais <- read.csv2('csv/jogadores.csv')
runApp()
runApp()
runApp()
View(dados_gerais)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
info <- read_html(as.string(url)) %>%
html_nodes("table") %>%
html_table()
info <- read_html(as.String(url)) %>%
html_nodes("table") %>%
html_table()
info <- read_html(to.string(url)) %>%
html_nodes("table") %>%
html_table()
?toString
info <- read_html(to.String(url)) %>%
html_nodes("table") %>%
html_table()
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
info <- read_html(input$url) %>%
html_nodes("table") %>%
html_table()
runApp()
info <- read_html(paste(url)) %>%
html_nodes("table") %>%
html_table()
runApp()
# Pacotes
library(shiny)
library(shinythemes)
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?reactive
runApp()
shiny::runApp()
?shiny.tag
type(urltexto)
typeof(urltexto)
urltexto <- reactive(input$url)
# Link da partida ------------------------------------------------------------------------------------------
url <- paste(urltexto) #cannot coerce type 'closure' to vector of type 'character' pesquisar
# Link da partida ------------------------------------------------------------------------------------------
url <- input$url #cannot coerce type 'closure' to vector of type 'character' pesquisar
# Pegando os dados no link da partida ----------------------------------------------------------------------
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
runApp()
?reactive
runApp()
?input
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
removeSource("04_previsão.R")
removeSource("/04_previsão.R")
removeSource("\04_previsão.R")
?removeSource
removeSource(previsaoResultado)
removeSource(preverResultado)
preverResultado <- function (url){
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(reshape2)
load(file = "model_nnet.rda")
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(url) %>%
html_nodes("table") %>%
html_table()
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
rm(info, url)
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- scale(partida)
partida <- t(partida)
partida <- as.data.frame(partida)
colnames(partida) <- c('timeA_R', 'timeB_R', 'timeA_ACS', 'timeB_ACS', 'timeA_KAST', 'timeB_KAST', 'timeA_KD', 'timeB_KD',
'timeA_ADR', 'timeB_ADR')
previsao <- compute(n, partida)
previsao$net.result
return(previsao$net.result)
}
preverResultado('https://www.vlr.gg/163367/edward-gaming-vs-funplus-phoenix-zhuque-fgc-valorant-invitational-2022-epilogue-gf')
runApp()
install.packages(data.table)
install.packages('data.table')
library(data.table)
dados_gerais <- fread('csv/jogadores.csv')
runApp()
dados_gerais <- fread('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
runApp()
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
dados_gerais <- fread('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
View(dados_gerais)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = F)
View(dados_gerais)
row.names(dados_gerais) <- make.names(dados_gerais[,2], unique = T)
row.names(dados_gerais) <- make.names(dados_gerais[1,], unique = T)
View(dados_gerais)
?make.names
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
make.names(dados_gerais[,1])
1<-make.names(dados_gerais[,1])
1 <- make.names(dados_gerais[,1])
count(make.names(dados_gerais[,1]))
View(dados_gerais)
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
dados_gerais <- read.csv2("csv/jogadores.csv")
library(data.table)
dados_gerais <- fread("csv/jogadores.csv")
View(dados_gerais)
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
row.names(dados_gerais)
count(row.names(dados_gerais))
View(dados_gerais)
dados_gerais <- read.csv2("csv/jogadores.csv")
View(dados_gerais)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
View(dados_gerais)
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
View(dados_gerais)
?fread
load(file = "model_nnet.rda")
dados_gerais <- fread('csv/jogadores.csv')
View(dados_gerais)
str(dados_gerais)
dados_gerais <- fread('csv/jogadores.csv', check.names = T)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, 'K:D', KAST, ADR)
dados_gerais <- fread('csv/jogadores.csv', check.names = T)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- read.csv2('csv/jogadores.csv')
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
runApp()
dados_gerais <- read.csv2('csv\jogadores.csv')
dados_gerais <- read.csv2('/csv/jogadores.csv')
dados_gerais <- read.csv2('C:/Users/anonb/Documents/TCC Pós/Scripts/csv/jogadores.csv')
runApp()
dados_gerais <- read.csv2("csv/jogadores.csv")
runApp()
dados_gerais <- read.csv('csv/jogadores.csv')
dados_gerais <- read.csv('csv/jogadores.csv', sep = ',')
dados_gerais <- read.csv('csv/jogadores.csv', header = header)
dados_gerais <- read.csv('csv/jogadores.csv', header = X)
dados_gerais <- read.csv('csv/jogadores.csv', header = 'X')
dados_gerais <- read.csv('csv/jogadores.csv', header = 1)
dados_gerais <- read.csv('csv/jogadores.csv', header = T)
load(file = "csv/jogadores.csv")
dados_gerais <- read.csv2('jogadores.csv')
runApp()
dados_gerais <- fread('csv/jogadores.csv')
runApp()
runApp()
dados_gerais <- fread('csv/jogadores.csv', check.names = T)
View(dados_gerais)
runApp()
names <- make.names(dados_gerais[,1], unique = T)
names <- make.names(dados_gerais$V1, unique = T)
row.names(dados_gerais) <- make.names(dados_gerais$Player, unique = T)
View(dados_gerais)
# Arrumando as colunas -------------------------------------------------------------------------------------
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais$Player, unique = T)
rm(names)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?actionButton
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
row_number(dados_gerais)
row_numbers(dados_gerais)
nrow(dados_gerais)
if(nrow(dados_gerais) >= 5)
nrow(dados_gerais) >= 5
nrow(dados_gerais) => 5
nrow(dados_gerais) = 5
nrow(dados_gerais) == 5
runApp()
runApp()
runApp()
