fntc = c('Enzo', 'Boaster', 'Mistic', 'Derke', 'Alfajer')
fntc <- paste0('\\b', fntc, '\\b')
dados_gerais$fntc <- ifelse(grepl(paste(fntc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$loud == 1 | dados_gerais$op == 1 | dados_gerais$drx == 1
| dados_gerais$xset == 1 | dados_gerais$tl == 1 | dados_gerais$lev == 1 |
dados_gerais$fpx == 1 | dados_gerais$fntc == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Calculando IDC (variancia de KAST entre os jogadores de cada time)
loud_df <- filter(resultado, resultado$loud == 1)
op_df <- filter(resultado, resultado$op == 1)
drx_df <- filter(resultado, resultado$drx == 1)
xset_df <- filter(resultado, resultado$xset == 1)
tl_df <- filter(resultado, resultado$tl == 1)
lev_df <- filter(resultado, resultado$lev == 1)
fpx_df <- filter(resultado, resultado$fpx == 1)
fntc_df <- filter(resultado, resultado$fntc == 1)
rm(loud, op, drx, xset, tl, lev, fpx, fntc)
# Colocando os indices de gini no dataframe 'resultado'
#resultado <- cbind(loud_df, op_df, drx_df, xset_df, tl_df, lev_df, fpx_df, fntc_df)
resultado <- merge(loud_df, op_df, all = T) %>%
merge(drx_df, all = T) %>%
merge(xset_df, all = T) %>%
merge(tl_df, all = T) %>%
merge(lev_df, all = T) %>%
merge(fpx_df, all = T) %>%
merge(fntc_df, all = T)
View(resultado)
# Tirando colunas de times dos dataframes especificos de cada time
loud_df <- loud_df[,-6:-13]
fntc_df <- fntc_df[,-6:-13]
xset_df <- xset_df[,-6:-13]
drx_df <- drx_df[,-6:-13]
lev_df <- lev_df[,-6:-13]
op_df <- op_df[,-6:-13]
tl_df <- tl_df[,-6:-13]
fpx_df <- fpx_df[,-6:-13]
time1 <- c(mean(drx_df$R))
time1 <- c(mean(drx_df$R), mean(fntc_df$R))
view(time1)
#
drxR <- mean(drx_df$R)
levR <- mean(lev_df$R)
opR <- mean(op_df$R)
xsetR <- mean(xset_df$R)
fpxR <- mean(fpx_df$R)
tlR <- mean(tl_df$R)
loudR <- mean(loud_df$R)
time1 <- c(drxR, levR, opR, xsetR, fpxR, tlR, drxR, opR, xsetR, drxR, loudR, fpxR, loudR, opR)
time2 <- c(fpxR, loudR, tlR, fntcR, levR, fntcR, loudR, xsetR, fpxR, fntcR, opR, drxR, opR, drxR)
fntcR <- mean(fntc_df$R)
time2 <- c(fpxR, loudR, tlR, fntcR, levR, fntcR, loudR, xsetR, fpxR, fntcR, opR, drxR, opR, drxR)
ganhador <- c(1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1)
jogos <- data.frame(time1, time2, ganhador)
View(jogos)
rm(drxR, levR, opR, xsetR, fpxR, tlR, loudR, fntcR)
rm(drxR, levR, opR, xsetR, fpxR, tlR, loudR, fntcR, time1, time2, ganhador)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
View(resultado)
View(jogos)
write.csv2(jogos, 'jogos.csv')
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
rm(list = ls())
?ls
rm(list = ls(-dados_gerais))
?filter
# Carregando a base de dados de jogadores ---------------------------------------------------------------
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas ----------------------------------------------------------------------------------
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos da competição GAME CHANGERS ---------------------------------------------------------------------------
#Cloud9 White
c9w = c('Bob', 'meL', 'Jazzyk1ns', 'alexis', 'katsumi') # Definindo o time 1
c9w <- paste0('\\b', c9w, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$c9w <- ifelse(grepl(paste(c9w, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Shopify Rebellion GC
sr = c('KP', 'bENITA', 'flowerful', 'sonder', 'Lorri')
sr <- paste0('\\b', sr, '\\b')
dados_gerais$sr <- ifelse(grepl(paste(sr, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Guild X
gldx = c('aNNja', 'cinnamon', 'Smurfette', 'roxi', 'ness')
gldx <- paste0('\\b', gldx, '\\b')
dados_gerais$gldx <- ifelse(grepl(paste(gldx, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#G2 Gozen
g2 = c('Glance', 'Petra', 'mimi', 'juliano', 'Mary')
g2 <- paste0('\\b', g2, '\\b')
dados_gerais$g2 <- ifelse(grepl(paste(g2, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Team Liquid Brazil
tl = c('drn', 'naxy', 'bstrdd', 'daiki', 'nat1')
tl <- paste0('\\b', tl, '\\b')
dados_gerais$tl <- ifelse(grepl(paste(tl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#KRÜ Fem
kru = c('consu', 'baesht', 'conir', 'kalita', 'romi')
kru <- paste0('\\b', kru, '\\b')
dados_gerais$kru <- ifelse(grepl(paste(kru, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#X10 Sapphire
x10 = c('JinNy', 'Muffyn', 'Babytz', 'Poly', 'alyssa')
x10 <- paste0('\\b', x10, '\\b')
dados_gerais$x10 <- ifelse(grepl(paste(x10, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#FENNEL GC
flgc = c('suzu', 'KOHAL', 'Festival', 'Len', 'Curumi')
flgc <- paste0('\\b', flgc, '\\b')
dados_gerais$flgc <- ifelse(grepl(paste(flgc, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$c9w == 1 | dados_gerais$sr == 1 | dados_gerais$gldx == 1
| dados_gerais$g2 == 1 | dados_gerais$tl == 1 | dados_gerais$kru == 1 |
dados_gerais$x10 == 1 | dados_gerais$flgc == 1)
# Removendo uma jogadora que tem o mesmo de outra
while (nrow(resultado) > 40) {
resultado <- resultado[-41,]
}
# Separando os times em dataframes
c9w_df <- filter(resultado, resultado$c9w == 1)
sr_df <- filter(resultado, resultado$sr == 1)
gldx_df <- filter(resultado, resultado$gldx == 1)
g2_df <- filter(resultado, resultado$g2 == 1)
tl_df <- filter(resultado, resultado$tl == 1)
kru_df <- filter(resultado, resultado$kru == 1)
x10_df <- filter(resultado, resultado$x10 == 1)
flgc_df <- filter(resultado, resultado$flgc == 1)
# Tirando colunas de times dos dataframes especificos de cada time
c9w_df <- c9w_df[,-6:-13]
flgc_df <- flgc_df[,-6:-13]
g2_df <- g2_df[,-6:-13]
gldx_df <- gldx_df[,-6:-13]
kru_df <- kru_df[,-6:-13]
sr_df <- sr_df[,-6:-13]
tl_df <- tl_df[,-6:-13]
x10_df <- x10_df[,-6:-13]
#
c9wR <- mean(c9w_df$R)
flgcR <- mean(flgc_df$R)
g2R <- mean(g2_df$R)
gldxR <- mean(gldx_df$R)
kruR <- mean(kru_df$R)
srR <- mean(sr_df$R)
tlR <- mean(tl_df$R)
x10R <- mean(x10_df$R)
time1 <- c(c9wR, g2R, gldxR, flgcR, kruR, gldxR, c9wR, srR, srR, c9wR, g2R, srR, g2R, tlR)
time2 <- c(kruR, x10R, srR, tlR, x10R, flgcR, g2R, tlR, x10R, gldxR, tlR, c9wR, srR, srR)
ganhador <- c(1, 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 1, 1, 2)
jogos <- data.frame(time1, time2, ganhador)
rm(drxR, levR, opR, xsetR, fpxR, tlR, loudR, fntcR, time1, time2, ganhador)
write.csv2(jogos, 'jogos2.csv')
rm(list = ls())
read.csv2(jogos1, 'jogos.csv')
jogos1 <- read.csv2('jogos.csv')
View(jogos1)
jogos1 <- read.csv2('jogos.csv') %>% select(-X)
View(jogos1)
jogos2 <- read.csv2('jogos2.csv') %>% select(-X)
jogos
jogos1
jogos2
jogos <- rbind(jogos1, jogos2)
View(jogos)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
training_data$Data <- as_date(training_data$Data)
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
library(neuralnet)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 1,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 5,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 1,
algorithm = 'rprop+',
stepmax = 100000)
?neuralnet
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'rprop+',
stepmax = 100000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 100000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = FALSE,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = T,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n$result.matrix
View(training_data)
View(test_data)
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(332)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "sse",
linear.output = F,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
?neuralnet
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
jogos$ganhador <- as.factor(jogos$ganhador)
# criando uma semente -------------------------------------------------------------------------------------
set.seed(222)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
set.seed(333)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 100,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = max,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
err.fct = "ce",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 10,
act.fct = "tanh",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = F,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
plot(n, rep = 1)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 10,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 2,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 5,
algorithm = 'slr',
stepmax = 1000)
n <- neuralnet(ganhador ~ time1 + time2,
data = jogos,
hidden = 2,
act.fct = "tanh",
linear.output = T,
lifesign = 'full',
rep = 3,
algorithm = 'slr',
stepmax = 1000)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(neuralnet)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(cluster)
library(xlsx)
library(ineq)
library(stringr)
library(dplyr)
library(h2o)
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Carregando a base de dados de jogadores
dados_gerais <- read.csv2('jogadores.csv')
# Arrumando as colunas
dados_gerais <- select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
# Definindo times especificos da competição CHAMPIONS
#nip
nip = c('xand', 'Jonn', 'v1xen', 'bezn1', 'cauanzin') # Definindo o time 1
nip <- paste0('\\b', nip, '\\b') # Colocando '\\b' antes e dps p pegar apenas as strings exatas
dados_gerais$nip <- ifelse(grepl(paste(nip, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#keyd Gaming
keyd = c('murizzz', 'mwzera', 'rhz', 'RgLMeister', 'heat')
keyd <- paste0('\\b', keyd, '\\b')
dados_gerais$keyd <- ifelse(grepl(paste(keyd, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#furia
furia = c('nzr', 'Quick', 'Khalil', 'Mazin', 'dgzin')
furia <- paste0('\\b', furia, '\\b')
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = F), 1, 0)
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#TBK
tbk = c('matheuzin', 'kon4n', 'tuyz', 'luk', 'ryotzz')
tbk <- paste0('\\b', tbk, '\\b')
dados_gerais$tbk <- ifelse(grepl(paste(tbk, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#kru
kru = c('NagZ', 'keznit', 'delz1k', 'Klaus', 'Mazino')
kru <- paste0('\\b', kru, '\\b')
dados_gerais$kru <- ifelse(grepl(paste(kru, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
#Fusion
fus = c('Dcop', 'sickLy', 'xander', 'Torrify', 'Mited', 'Darker')
fus <- paste0('\\b', fus, '\\b')
dados_gerais$fus <- ifelse(grepl(paste(fus, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
View(dados_gerais)
#E-Xolos LAZER
exl = c('jfoeN', 'BandiCoot', 'DaveeyS', 'Feniz', 'Peloncito')
exl <- paste0('\\b', exl, '\\b')
dados_gerais$exl <- ifelse(grepl(paste(exl, collapse = '|'), rownames(dados_gerais), useBytes = T), 1 ,0)
#z9 Team
z9 = c('puleule', 'bnj', 'mizu', 'Tuli', 'deigara')
z9 <- paste0('\\b', z9, '\\b')
dados_gerais$z9 <- ifelse(grepl(paste(z9, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
resultado <- filter(dados_gerais, dados_gerais$nip == 1 | dados_gerais$keyd == 1 | dados_gerais$furia == 1
| dados_gerais$tbk == 1 | dados_gerais$kru == 1 | dados_gerais$fus == 1 |
dados_gerais$exl == 1 | dados_gerais$z9 == 1)
View(resultado)
?rownames
?grepl
dados_gerais$furia <- ifelse(grepl(paste(furia, collapse = '|'), rownames(dados_gerais), useBytes = T, fixed = T), 1, 0)
View(dados_gerais)
