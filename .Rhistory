}
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(6)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.8) {
acharnn()
}
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.8) {
acharnn()
}
while ( i < 0.77) {
acharnn()
}
save(n, file ='model_nnet.rda')
runApp()
runApp()
runApp()
runApp()
Predict$net.result
Predict$net.result[1]
str(Predict$net.result[1])
runApp()
runApp()
round(Predict$net.result[1])
Predict$net.result[1]
Predict$net.result[5]
Predict$net.result[4]
round(Predict$net.result[4])
round(Predict$net.result[4], 2)
runApp()
?reverse
runApp()
Predict$net.result
shiny::runApp()
runApp()
View(predictVstest)
View(test_data)
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(6)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Carregando o dataframe -----------------------------------------------------------------------------------
jogos <- read.csv2('csv/df.csv') %>% dplyr::select(-X)
# Normalizando os dados ------------------------------------------------------------------------------------
normalizando <- dplyr::select(jogos, -ganhador)
normalizando <- as.data.frame(scale(normalizando))
jogos <- dplyr::select(jogos, ganhador)
jogos <- cbind(normalizando, jogos)
rm(normalizando)
jogos$ganhador <- as.factor(jogos$ganhador)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(1)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Atualizando a seed para achar a melhor neuralnetwork -------------------------------------------------------
set.seed(6)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
acharnn <- function(){
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
}
while ( i < 0.77) {
acharnn()
}
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
while ( i < 0.77) {
acharnn()
}
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
print(i)
n <- neuralnet(ganhador == 1 ~ time1R + time2R + time1ACS + time2ACS + time1KAST + time2KAST + time1KD + time2KD +
time1ADR + time2ADR,
data = training_data,
hidden = c(10,10,10),
err.fct = "sse",
linear.output = F,
threshold = 0.3,
lifesign = 'minimal',
rep = 1,
algorithm = 'rprop-',
stepmax = 10000)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
while ( i < 0.77) {
acharnn()
}
#Rede neural
load(file = "model_nnet.rda")
View(n)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>mean(Predict$net.result),1,0)
predictVstest <- cbind(test_data, Predict$net.result)
i <<- sum(predictVstest$ganhador == nn2)/ nrow(test_data)
round(i, 2)
load(salvando.rds)
load('salvando.rds')
salvando <- salvando %>% map_df(as_tibble)
salvando <- as.data.frame(salvando) %>% map_df(as_tibble)
# Carregando pacotes --------------------------------------------------------------------------------------
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
salvando <- as.data.frame(salvando) %>% map_df(as_tibble)
library(purr)
install.packages(purr)
install.packages('purr')
install.packages('purrr')
library(purr)
library(purrr)
salvando <- as.data.frame(salvando) %>% map_df(as_tibble)
View(salvando)
library(tidyverse)
salvando <- as.data.frame(salvando) %>% map_df(as_tibble)
load('salvando.rds')
salvando <- as.data.frame(salvando) %>% map_df(as_tibble)
load('salvando.rds')
salvando <- as.data.frame(salvando)
salvando <- salvando %>% map_df(as_tibble)
load('salvando.rds')
salvando <- salvando %>% map_df(as_tibble)
View(salvando)
library(tidyverse)
paginas <- ''
p <- 1
for (i in 34:44){
paginas[p] <- paste('https://www.vlr.gg/matches/results/?page=', p, sep = '')
p = p + 1
}
c <- 1
matchs <- 'a'
funcaoPagina <- function(pagina){
matchs <- read_html(pagina) %>%
html_nodes('a') %>% html_attr('href')
matchs <- matchs[15:64]
n <- 1
for (i in matchs){
matchs[n] <- paste('https://www.vlr.gg', matchs[n], sep = '')
n = n + 1
}
return(matchs)
}
f <- 1
a <- list()
for (i in paginas){
a[[length(a)+1]] = funcaoPagina(paginas[f])
f = f + 1
}
View(a)
rm (c, f, i, p, matchs, paginas)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
paginas <- ''
p <- 1
for (i in 34:44){
paginas[p] <- paste('https://www.vlr.gg/matches/results/?page=', p, sep = '')
p = p + 1
}
c <- 1
matchs <- 'a'
funcaoPagina <- function(pagina){
matchs <- read_html(pagina) %>%
html_nodes('a') %>% html_attr('href')
matchs <- matchs[15:64]
n <- 1
for (i in matchs){
matchs[n] <- paste('https://www.vlr.gg', matchs[n], sep = '')
n = n + 1
}
return(matchs)
}
f <- 1
a <- list()
for (i in paginas){
a[[length(a)+1]] = funcaoPagina(paginas[f])
f = f + 1
}
catalogarporUrl <- function (string){
tryCatch(
{
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(string) %>%
html_nodes("table") %>%
html_table()
placar <- read_html(string) %>%
html_nodes("div.js-spoiler") %>% html_text(trim=T)
placar <- str_replace_all(placar, '\t', '') %>% str_replace_all('\n', '')
placar <- as.data.frame(placar[1])
placar <- separate(placar, 'placar[1]', into = c('Time1', 'Time2'), sep = ':', extra = 'merge')
ifelse(placar$Time1 > placar$Time2, ganhador <- 1, ganhador <- 0)
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- t(partida)
partida <- as.data.frame(partida) %>% cbind(ganhador)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR', 'ganhador')
return(partida)
}
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
rm (c, f, i, p, matchs, paginas)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
a <- unlist(a)
catalogarporUrl <- function (string){
tryCatch(
{
# Carregando pacotes --------------------------------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(tidyr)
library(rvest)
library(quantmod)
library(httr)
library(tibble)
library(stringr)
library(reshape2)
dados_gerais <- read.csv2("csv/jogadores.csv")
dados_gerais <- dplyr::select(dados_gerais, Player, R, ACS, K.D, KAST, ADR)
row.names(dados_gerais) <- make.names(dados_gerais[,1], unique = T)
dados_gerais <- dplyr::select(dados_gerais, -Player)
dados_gerais$KAST <- parse_number(dados_gerais$KAST)
info <- read_html(string) %>%
html_nodes("table") %>%
html_table()
placar <- read_html(string) %>%
html_nodes("div.js-spoiler") %>% html_text(trim=T)
placar <- str_replace_all(placar, '\t', '') %>% str_replace_all('\n', '')
placar <- as.data.frame(placar[1])
placar <- separate(placar, 'placar[1]', into = c('Time1', 'Time2'), sep = ':', extra = 'merge')
ifelse(placar$Time1 > placar$Time2, ganhador <- 1, ganhador <- 0)
timeA <- info[[1]]
timeB <- info[[2]]
timeA <- lapply(timeA, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeB <- lapply(timeB, str_replace_all, '\n', '') %>%
lapply(str_replace_all, '\t', '')
timeA <- as.data.frame(timeA[1])
timeB <- as.data.frame(timeB[1])
colnames(timeA) <- '1'
colnames(timeB) <- '1'
timeA <- separate(timeA, '1', into = c("Player", "Team"), sep = "\\s+", extra = "merge")
timeB <- separate(timeB, '1', into = c("Player", "Team"), sep ="\\s+", extra = "merge")
timeA <- timeA$Player
timeB <- timeB$Player
timeA <- paste0('\\b', timeA, '\\b')
dados_gerais$timeA <- ifelse(grepl(paste(timeA, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeB <- paste0('\\b', timeB, '\\b')
dados_gerais$timeB <- ifelse(grepl(paste(timeB, collapse = '|'), rownames(dados_gerais), useBytes = T), 1, 0)
timeA_df <- filter(dados_gerais, dados_gerais$timeA == 1)
timeA_df <- dplyr::select(timeA_df, R, ACS, K.D, KAST, ADR)
timeB_df <- filter(dados_gerais, dados_gerais$timeB == 1)
timeB_df <- dplyr::select(timeB_df, R, ACS, K.D, KAST, ADR)
if(nrow(timeA_df) == 5 && nrow(timeB_df) == 5){
# Médias
timeA_R <- mean(timeA_df$R)
timeA_ACS <- mean(timeA_df$ACS)
timeA_KAST <- mean(timeA_df$KAST)
timeA_KD <- mean(timeA_df$K.D)
timeA_ADR <- mean(timeA_df$ADR)
timeB_R <- mean(timeB_df$R)
timeB_ACS <- mean(timeB_df$ACS)
timeB_KAST <- mean(timeB_df$KAST)
timeB_KD <- mean(timeB_df$K.D)
timeB_ADR <- mean(timeB_df$ADR)
partida <- c(timeA_R, timeB_R, timeA_ACS, timeB_ACS, timeA_KAST, timeB_KAST, timeA_KD, timeB_KD,
timeA_ADR, timeB_ADR)
partida <- t(partida)
partida <- as.data.frame(partida) %>% cbind(ganhador)
colnames(partida) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR', 'ganhador')
return(partida)
}
}
, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
rm (c, f, i, p, matchs, paginas)
m <- 1
dff <- list()
for (i in a){
tryCatch({
dff[[length(dff)+1]] <- catalogarporUrl(a[m])
m = m + 1
}, error = function(e){cat('error:', conditionMessage(e), '\n')})
}
dff <- dff %>% map_df(as_tibble)
View(dff)
write.csv2(dff, 'csv/df2.csv')
View(dff)
View(dff)
# Pegando os dados no link da partida ----------------------------------------------------------------------
jogos <- read.csv2('csv/df2.csv')
rm(dff)
# Pegando os dados no link da partida ----------------------------------------------------------------------
jogos <- read.csv2('csv/df2.csv') %>% select(-X, -ganhador)
jogos_scale <- read.csv2('csv/df.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, jogos)
jogos_scale <- scale(jogos_scale)
partida <- jogos_scale[814:Inf,]
partida <- jogos_scale[814:1090,]
partidas <- jogos_scale[814:1090,]
rm(partida)
partidas <- t(partidas)
partidas <- as.data.frame(partidas)
View(partidas)
colnames(partidas) <- c('time1R', 'time2R', 'time1ACS', 'time2ACS', 'time1KAST', 'time2KAST', 'time1KD', 'time2KD',
'time1ADR', 'time2ADR')
View(partidas)
# Pegando os dados no link da partida ----------------------------------------------------------------------
jogos <- read.csv2('csv/df2.csv') %>% select(-X, -ganhador)
jogos_scale <- read.csv2('csv/df.csv') %>% select(-X, -ganhador)
jogos_scale <- rbind(jogos_scale, jogos)
jogos_scale <- scale(jogos_scale)
partidas <- jogos_scale[814:1090,]
partidas <- as.data.frame(partidas)
View(partidas)
View(partidas)
previsao <- compute(n, partidas)
load(file = "model_nnet.rda")
previsao <- compute(n, partidas)
previsao <- compute(n, partidas)
View(n)
?compute
library(neuralnet)
previsao <- compute(n, partidas)
previsao <- previsao$net.result[1]
previsao
previsao <- previsao$net.result
previsao <- compute(n, partidas)
previsao$net.result
previsao <- previsao$net.result
partidas_reversas <- partidas
partidas_reversa$time1R <- partidas$time2R
partidas_reversa$time2R <- partidas$time1R
partidas_reversa$time1ACS <- partidas$time2ACS
partidas_reversa$time2ACS <- partidas$time1ACS
partidas_reversas$time1R <- partidas$time2R
partidas_reversas$time2R <- partidas$time1R
partidas_reversas$time1ACS <- partidas$time2ACS
partidas_reversas$time2ACS <- partidas$time1ACS
partidas_reversas$time1KAST <- partidas$time2KAST
partidas_reversas$time2KAST <- partidas$time1KAST
partidas_reversas$time1KD <- partidas$time2KD
partidas_reversas$time2KD <- partidas$time1KD
partidas_reversas$time1ADR <- partidas$time2ADR
partidas_reversas$time2ADR <- partidas$time1ADR
previsao2 <- compute(n, partida_reversas)
previsao2 <- compute(n, partidas_reversas)
previsao2 <- previsao2$net.result
a <- 1
b <- 1
a <- previsao
previsao[]
previsao[,1]
previsoes <- ifelse (previsao[,1] > previsao2[,1], 1, 0)
cbind(partidas, previsoes)
resultadovspredict <- cbind(partidas, previsoes)
View(resultadovspredict)
resultados <- read.csv2('csv/df2.csv') %>% select(ganhador)
resultados <- read.csv2('csv/df2.csv') %>% dplyr::select(ganhador)
View(resultados)
resultadovspredict <- cbind(partidas, previsoes, resultados)
View(resultadovspredict)
i <- sum(resultadovspredict$ganhador == resultadovspredict$previsoes)/nrow(resultadovspredict)
