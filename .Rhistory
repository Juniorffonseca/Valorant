# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(13)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(12)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(11)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.8, 0.2))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(15)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/46
sum(predictVstest$ganhador == nn2)/42
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/42
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/42
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/42
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/42
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(25)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(26)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(36)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(37)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(38)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.75, 0.25))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(31)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
# Criando dataframes de teste e validação -----------------------------------------------------------------
set.seed(33)
inp <- sample(2, nrow(jogos), replace = TRUE, prob = c(0.7, 0.3))
training_data <- jogos[inp==1, ]
test_data <- jogos[inp==2, ]
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/42
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(7,7,7),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(8,8),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
# Modelando a rede neural ---------------------------------------------------------------------------------
n <- neuralnet(ganhador ~ time1R + time2R + time1ACS + time2ACS +time1KAST + time2KAST + time1KD + time2KD + time1ADR +
time2ADR,
data = training_data,
hidden = c(10,10),
err.fct = "sse",
linear.output = T,
threshold = 0.01,
lifesign = 'minimal',
rep = 5,
algorithm = 'rprop-',
stepmax = 100000)
plot(n, rep = 1)
# Prediction ---------------------------------------------------------------------------------------------
Predict = compute(n, test_data)
nn2 <- ifelse(Predict$net.result[,1]>Predict$net.result[,2],1,0)
predictVstest <- cbind(test_data, Predict$net.result)
sum(predictVstest$ganhador == nn2)/30
